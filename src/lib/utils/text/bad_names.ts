const DISALLOWED_NAMES = [
	'about',
	'account',
	'activate',
	'add',
	'admin',
	'administrator',
	'api',
	'app',
	'apps',
	'archive',
	'archives',
	'auth',
	'better',
	'blog',
	'cache',
	'cancel',
	'careers',
	'cart',
	'changelog',
	'checkout',
	'codereview',
	'compare',
	'config',
	'configuration',
	'connect',
	'contact',
	'create',
	'dashboard',
	'delete',
	'direct_messages',
	'documentation',
	'download',
	'downloads',
	'edit',
	'email',
	'employment',
	'enterprise',
	'facebook',
	'faq',
	'favorites',
	'feed',
	'feedback',
	'feeds',
	'fleet',
	'fleets',
	'follow',
	'followers',
	'following',
	'friend',
	'friends',
	'group',
	'groups',
	'gist',
	'help',
	'home',
	'hosting',
	'hostmaster',
	'idea',
	'ideas',
	'index',
	'info',
	'invitations',
	'invite',
	'is',
	'it',
	'json',
	'job',
	'jobs',
	'lists',
	'localhost',
	'localhost:5173',
	'login',
	'logout',
	'logs',
	'mail',
	'map',
	'maps',
	'mine',
	'mis',
	'news',
	'oauth',
	'oauth_clients',
	'offers',
	'openid',
	'order',
	'orders',
	'organizations',
	'orgs',
	'plans',
	'popular',
	'privacy',
	'projects',
	'put',
	'post',
	'recruitment',
	'register',
	'remove',
	'replies',
	'root',
	'rss',
	'sales',
	'save',
	'search',
	'security',
	'sessions',
	'settings',
	'shop',
	'signup',
	'sitemap',
	'ssl',
	'ssladmin',
	'ssladministrator',
	'sslwebmaster',
	'status',
	'stories',
	'styleguide',
	'subscribe',
	'subscriptions',
	'support',
	'sysadmin',
	'sysadministrator',
	'terms',
	'tour',
	'translations',
	'trends',
	'twitter',
	'twittr',
	'update',
	'unfollow',
	'unsubscribe',
	'url',
	'user',
	'weather',
	'widget',
	'widgets',
	'wiki',
	'ww',
	'www',
	'wwww',
	'xfn',
	'xml',
	'xmpp',
	'yml',
	'yaml',
	'abuse',
	'account',
	'adm',
	'admin',
	'admins',
	'administrator',
	'administrators',
	'all',
	'ceo',
	'cfo',
	'contact',
	'coo',
	'customer',
	'document',
	'documents',
	'download',
	'downloads',
	'faq',
	'file',
	'files',
	'ftp',
	'help',
	'home',
	'host_master',
	'host-master',
	'hostmaster',
	'http',
	'https',
	'imap',
	'info',
	'ldap',
	'list',
	'list-request',
	'mail',
	'majordomo',
	'manager',
	'marketing',
	'member',
	'membership',
	'mis',
	'news',
	'noreply',
	'office',
	'owner',
	'password',
	'pop',
	'post_master',
	'post-master',
	'postfix',
	'postmaster',
	'register',
	'registration',
	'root',
	'sales',
	'secure',
	'security',
	'sftp',
	'site',
	'shop',
	'smtp',
	'ssl',
	'ssl_admin',
	'ssl-admin',
	'ssladmin',
	'ssl_administrator',
	'ssl-administrator',
	'ssladministrator',
	'ssl_webmaster',
	'ssl-webmaster',
	'sslwebmaster',
	'support',
	'sysadmin',
	'test',
	'trouble',
	'usenet',
	'user',
	'username',
	'users',
	'web',
	'web_master',
	'web-master',
	'webmaster',
	'web_admin',
	'web-admin',
	'webadmin',
	'webmail',
	'webserver',
	'website',
	'wheel',
	'vww',
	'wvw',
	'wwv',
	'www',
	'www-data',
	'wwww',
	'w3',
	'www3',
	// Names of popular companies that might be used for phishing
	'google',
	'microsoft',
	'apple',
	'facebook',
	'amazon',
	'twitter',
	'instagram',
	'linkedin',
	'youtube',
	'netflix',
	'paypal',
	'ebay',
	'snapchat',
	'tiktok',
	'whatsapp',
	'telegram',
	'zoom',
	'meet',
	'drive',
	'reddit',
	'twitch',
	'spotify',
	'discord',
	'pinterest',
	'tumblr',
	'github',
	'wechat',
	'qq',
	'baidu',
	'alibaba',
	'jd',
	'taobao',
	'tmall',
	'xiaomi',
	'huawei',
	'vivo',
	'oppo',
	'oneplus',
	'realme',
	'samsung',
	'lg',
	'sony',
	'yandex',

	//cloud and related services
	'mailgun',
	'sendgrid',
	'postmark',
	'sparkpost',
	'mailchimp',
	'mailjet',
	'elasticemail',
	'sendinblue',
	'cloudflare',
	'aws',
	'azure',
	'gcp',
	'heroku',
	'vercel',
	'netlify',
	'digitalocean',
	'do',
	'linode',

	// Programming languages and frameworks
	'react',
	'vue',
	'angular',
	'svelte',
	'next',
	'nuxt',
	'gatsby',
	'wordpress'
];

const DIVIDERS = ['-', '_', '.'];

export const DISALLOWED_NAMES_SET = new Set(DISALLOWED_NAMES);

export function checkDisallowedNames(name: string): void {
	const lower = name.toLowerCase();
	if (DISALLOWED_NAMES_SET.has(lower)) {
		throw new Error(`The name "${name}" is disallowed.`);
	}

	for (const divider of DIVIDERS) {
		if (DISALLOWED_NAMES_SET.has(lower.replace(divider, ''))) {
			throw new Error(`The name "${name}", after removing ${divider}, is disallowed.`);
		}
	}

	// split the name by each of the dividers and, for each of them, check if any of the parts are disallowed
	for (const divider of DIVIDERS) {
		const parts = lower.split(divider);
		if (parts.some((part) => DISALLOWED_NAMES_SET.has(part))) {
			throw new Error(
				`The name "${name}", after splitting by ${divider}, includes a disallowed name.`
			);
		}
	}

	return;
}
