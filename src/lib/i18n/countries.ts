import { type LanguageCode } from '$lib/i18n/languages';

export const countryList = [
	{
		code: 'af',
		flag: 'ğŸ‡¦ğŸ‡«'
	},
	{
		code: 'al',
		flag: 'ğŸ‡¦ğŸ‡±'
	},
	{
		code: 'dz',
		flag: 'ğŸ‡©ğŸ‡¿'
	},
	{
		code: 'as',
		flag: 'ğŸ‡¦ğŸ‡¸'
	},
	{
		code: 'ad',
		flag: 'ğŸ‡¦ğŸ‡©'
	},
	{
		code: 'ao',
		flag: 'ğŸ‡¦ğŸ‡´'
	},
	{
		code: 'ai',
		flag: 'ğŸ‡¦ğŸ‡®'
	},
	{
		code: 'aq',
		flag: 'ğŸ‡¦ğŸ‡¶'
	},
	{
		code: 'ag',
		flag: 'ğŸ‡¦ğŸ‡¬'
	},
	{
		code: 'ar',
		flag: 'ğŸ‡¦ğŸ‡·'
	},
	{
		code: 'am',
		flag: 'ğŸ‡¦ğŸ‡²'
	},
	{
		code: 'aw',
		flag: 'ğŸ‡¦ğŸ‡¼'
	},
	{
		code: 'au',
		flag: 'ğŸ‡¦ğŸ‡º'
	},
	{
		code: 'at',
		flag: 'ğŸ‡¦ğŸ‡¹'
	},
	{
		code: 'az',
		flag: 'ğŸ‡¦ğŸ‡¿'
	},
	{
		code: 'bs',
		flag: 'ğŸ‡§ğŸ‡¸'
	},
	{
		code: 'bh',
		flag: 'ğŸ‡§ğŸ‡­'
	},
	{
		code: 'bd',
		flag: 'ğŸ‡§ğŸ‡©'
	},
	{
		code: 'bb',
		flag: 'ğŸ‡§ğŸ‡§'
	},
	{
		code: 'by',
		flag: 'ğŸ‡§ğŸ‡¾'
	},
	{
		code: 'be',
		flag: 'ğŸ‡§ğŸ‡ª'
	},
	{
		code: 'bz',
		flag: 'ğŸ‡§ğŸ‡¿'
	},
	{
		code: 'bj',
		flag: 'ğŸ‡§ğŸ‡¯'
	},
	{
		code: 'bm',
		flag: 'ğŸ‡§ğŸ‡²'
	},
	{
		code: 'bt',
		flag: 'ğŸ‡§ğŸ‡¹'
	},
	{
		code: 'bo',
		flag: 'ğŸ‡§ğŸ‡´'
	},
	{
		code: 'bq',
		flag: 'ğŸ‡§ğŸ‡¶'
	},
	{
		code: 'ba',
		flag: 'ğŸ‡§ğŸ‡¦'
	},
	{
		code: 'bw',
		flag: 'ğŸ‡§ğŸ‡¼'
	},
	{
		code: 'bv',
		flag: 'ğŸ‡§ğŸ‡»'
	},
	{
		code: 'br',
		flag: 'ğŸ‡§ğŸ‡·'
	},
	{
		code: 'io',
		flag: 'ğŸ‡®ğŸ‡´'
	},
	{
		code: 'bn',
		flag: 'ğŸ‡§ğŸ‡³'
	},
	{
		code: 'bg',
		flag: 'ğŸ‡§ğŸ‡¬'
	},
	{
		code: 'bf',
		flag: 'ğŸ‡§ğŸ‡«'
	},
	{
		code: 'bi',
		flag: 'ğŸ‡§ğŸ‡®'
	},
	{
		code: 'cv',
		flag: 'ğŸ‡¨ğŸ‡»'
	},
	{
		code: 'kh',
		flag: 'ğŸ‡°ğŸ‡­'
	},
	{
		code: 'cm',
		flag: 'ğŸ‡¨ğŸ‡²'
	},
	{
		code: 'ca',
		flag: 'ğŸ‡¨ğŸ‡¦'
	},
	{
		code: 'ky',
		flag: 'ğŸ‡°ğŸ‡¾'
	},
	{
		code: 'cf',
		flag: 'ğŸ‡¨ğŸ‡«'
	},
	{
		code: 'td',
		flag: 'ğŸ‡¹ğŸ‡©'
	},
	{
		code: 'cl',
		flag: 'ğŸ‡¨ğŸ‡±'
	},
	{
		code: 'cn',
		flag: 'ğŸ‡¨ğŸ‡³'
	},
	{
		code: 'cx',
		flag: 'ğŸ‡¨ğŸ‡½'
	},
	{
		code: 'cc',
		flag: 'ğŸ‡¨ğŸ‡¨'
	},
	{
		code: 'co',
		flag: 'ğŸ‡¨ğŸ‡´'
	},
	{
		code: 'km',
		flag: 'ğŸ‡°ğŸ‡²'
	},
	{
		code: 'cd',
		flag: 'ğŸ‡¨ğŸ‡©'
	},
	{
		code: 'cg',
		flag: 'ğŸ‡¨ğŸ‡¬'
	},
	{
		code: 'ck',
		flag: 'ğŸ‡¨ğŸ‡°'
	},
	{
		code: 'cr',
		flag: 'ğŸ‡¨ğŸ‡·'
	},
	{
		code: 'hr',
		flag: 'ğŸ‡­ğŸ‡·'
	},
	{
		code: 'cu',
		flag: 'ğŸ‡¨ğŸ‡º'
	},
	{
		code: 'cw',
		flag: 'ğŸ‡¨ğŸ‡¼'
	},
	{
		code: 'cy',
		flag: 'ğŸ‡¨ğŸ‡¾'
	},
	{
		code: 'cz',
		flag: 'ğŸ‡¨ğŸ‡¿'
	},
	{
		code: 'ci',
		flag: 'ğŸ‡¨ğŸ‡®'
	},
	{
		code: 'dk',
		flag: 'ğŸ‡©ğŸ‡°'
	},
	{
		code: 'dj',
		flag: 'ğŸ‡©ğŸ‡¯'
	},
	{
		code: 'dm',
		flag: 'ğŸ‡©ğŸ‡²'
	},
	{
		code: 'do',
		flag: 'ğŸ‡©ğŸ‡´'
	},
	{
		code: 'ec',
		flag: 'ğŸ‡ªğŸ‡¨'
	},
	{
		code: 'eg',
		flag: 'ğŸ‡ªğŸ‡¬'
	},
	{
		code: 'sv',
		flag: 'ğŸ‡¸ğŸ‡»'
	},
	{
		code: 'gq',
		flag: 'ğŸ‡¬ğŸ‡¶'
	},
	{
		code: 'er',
		flag: 'ğŸ‡ªğŸ‡·'
	},
	{
		code: 'ee',
		flag: 'ğŸ‡ªğŸ‡ª'
	},
	{
		code: 'sz',
		flag: 'ğŸ‡¸ğŸ‡¿'
	},
	{
		code: 'et',
		flag: 'ğŸ‡ªğŸ‡¹'
	},
	{
		code: 'fk',
		flag: 'ğŸ‡«ğŸ‡°'
	},
	{
		code: 'fo',
		flag: 'ğŸ‡«ğŸ‡´'
	},
	{
		code: 'fj',
		flag: 'ğŸ‡«ğŸ‡¯'
	},
	{
		code: 'fi',
		flag: 'ğŸ‡«ğŸ‡®'
	},
	{
		code: 'fr',
		flag: 'ğŸ‡«ğŸ‡·'
	},
	{
		code: 'gf',
		flag: 'ğŸ‡¬ğŸ‡«'
	},
	{
		code: 'pf',
		flag: 'ğŸ‡µğŸ‡«'
	},
	{
		code: 'tf',
		flag: 'ğŸ‡¹ğŸ‡«'
	},
	{
		code: 'ga',
		flag: 'ğŸ‡¬ğŸ‡¦'
	},
	{
		code: 'gm',
		flag: 'ğŸ‡¬ğŸ‡²'
	},
	{
		code: 'ge',
		flag: 'ğŸ‡¬ğŸ‡ª'
	},
	{
		code: 'de',
		flag: 'ğŸ‡©ğŸ‡ª'
	},
	{
		code: 'gh',
		flag: 'ğŸ‡¬ğŸ‡­'
	},
	{
		code: 'gi',
		flag: 'ğŸ‡¬ğŸ‡®'
	},
	{
		code: 'gr',
		flag: 'ğŸ‡¬ğŸ‡·'
	},
	{
		code: 'gl',
		flag: 'ğŸ‡¬ğŸ‡±'
	},
	{
		code: 'gd',
		flag: 'ğŸ‡¬ğŸ‡©'
	},
	{
		code: 'gp',
		flag: 'ğŸ‡¬ğŸ‡µ'
	},
	{
		code: 'gu',
		flag: 'ğŸ‡¬ğŸ‡º'
	},
	{
		code: 'gt',
		flag: 'ğŸ‡¬ğŸ‡¹'
	},
	{
		code: 'gg',
		flag: 'ğŸ‡¬ğŸ‡¬'
	},
	{
		code: 'gn',
		flag: 'ğŸ‡¬ğŸ‡³'
	},
	{
		code: 'gw',
		flag: 'ğŸ‡¬ğŸ‡¼'
	},
	{
		code: 'gy',
		flag: 'ğŸ‡¬ğŸ‡¾'
	},
	{
		code: 'ht',
		flag: 'ğŸ‡­ğŸ‡¹'
	},
	{
		code: 'hm',
		flag: 'ğŸ‡­ğŸ‡²'
	},
	{
		code: 'va',
		flag: 'ğŸ‡»ğŸ‡¦'
	},
	{
		code: 'hn',
		flag: 'ğŸ‡­ğŸ‡³'
	},
	{
		code: 'hk',
		flag: 'ğŸ‡­ğŸ‡°'
	},
	{
		code: 'hu',
		flag: 'ğŸ‡­ğŸ‡º'
	},
	{
		code: 'is',
		flag: 'ğŸ‡®ğŸ‡¸'
	},
	{
		code: 'in',
		flag: 'ğŸ‡®ğŸ‡³'
	},
	{
		code: 'id',
		flag: 'ğŸ‡®ğŸ‡©'
	},
	{
		code: 'ir',
		flag: 'ğŸ‡®ğŸ‡·'
	},
	{
		code: 'iq',
		flag: 'ğŸ‡®ğŸ‡¶'
	},
	{
		code: 'ie',
		flag: 'ğŸ‡®ğŸ‡ª'
	},
	{
		code: 'im',
		flag: 'ğŸ‡®ğŸ‡²'
	},
	{
		code: 'il',
		flag: 'ğŸ‡®ğŸ‡±'
	},
	{
		code: 'it',
		flag: 'ğŸ‡®ğŸ‡¹'
	},
	{
		code: 'jm',
		flag: 'ğŸ‡¯ğŸ‡²'
	},
	{
		code: 'jp',
		flag: 'ğŸ‡¯ğŸ‡µ'
	},
	{
		code: 'je',
		flag: 'ğŸ‡¯ğŸ‡ª'
	},
	{
		code: 'jo',
		flag: 'ğŸ‡¯ğŸ‡´'
	},
	{
		code: 'kz',
		flag: 'ğŸ‡°ğŸ‡¿'
	},
	{
		code: 'ke',
		flag: 'ğŸ‡°ğŸ‡ª'
	},
	{
		code: 'ki',
		flag: 'ğŸ‡°ğŸ‡®'
	},
	{
		name: `Korea, Democratic People's Repubkic of`,
		code: 'kp',
		flag: 'ğŸ‡°ğŸ‡µ'
	},
	{
		code: 'kr',
		flag: 'ğŸ‡°ğŸ‡·'
	},
	{
		code: 'kw',
		flag: 'ğŸ‡°ğŸ‡¼'
	},
	{
		code: 'kg',
		flag: 'ğŸ‡°ğŸ‡¬'
	},
	{
		name: "Lao People's Democratic Republic",
		code: 'la',
		flag: 'ğŸ‡±ğŸ‡¦'
	},
	{
		code: 'lv',
		flag: 'ğŸ‡±ğŸ‡»'
	},
	{
		code: 'lb',
		flag: 'ğŸ‡±ğŸ‡§'
	},
	{
		code: 'ls',
		flag: 'ğŸ‡±ğŸ‡¸'
	},
	{
		code: 'lr',
		flag: 'ğŸ‡±ğŸ‡·'
	},
	{
		code: 'ly',
		flag: 'ğŸ‡±ğŸ‡¾'
	},
	{
		code: 'li',
		flag: 'ğŸ‡±ğŸ‡®'
	},
	{
		code: 'lt',
		flag: 'ğŸ‡±ğŸ‡¹'
	},
	{
		code: 'lu',
		flag: 'ğŸ‡±ğŸ‡º'
	},
	{
		code: 'mo',
		flag: 'ğŸ‡²ğŸ‡´'
	},
	{
		code: 'mg',
		flag: 'ğŸ‡²ğŸ‡¬'
	},
	{
		code: 'mw',
		flag: 'ğŸ‡²ğŸ‡¼'
	},
	{
		code: 'my',
		flag: 'ğŸ‡²ğŸ‡¾'
	},
	{
		code: 'mv',
		flag: 'ğŸ‡²ğŸ‡»'
	},
	{
		code: 'ml',
		flag: 'ğŸ‡²ğŸ‡±'
	},
	{
		code: 'mt',
		flag: 'ğŸ‡²ğŸ‡¹'
	},
	{
		code: 'mh',
		flag: 'ğŸ‡²ğŸ‡­'
	},
	{
		code: 'mq',
		flag: 'ğŸ‡²ğŸ‡¶'
	},
	{
		code: 'mr',
		flag: 'ğŸ‡²ğŸ‡¦'
	},
	{
		code: 'mu',
		flag: 'ğŸ‡²ğŸ‡º'
	},
	{
		code: 'yt',
		flag: 'ğŸ‡¾ğŸ‡¹'
	},
	{
		code: 'mx',
		flag: 'ğŸ‡²ğŸ‡½'
	},
	{
		code: 'fm',
		flag: 'ğŸ‡«ğŸ‡²'
	},
	{
		code: 'md',
		flag: 'ğŸ‡²ğŸ‡©'
	},
	{
		code: 'mc',
		flag: 'ğŸ‡²ğŸ‡¨'
	},
	{
		code: 'mn',
		flag: 'ğŸ‡²ğŸ‡³'
	},
	{
		code: 'me',
		flag: 'ğŸ‡²ğŸ‡ª'
	},
	{
		code: 'ms',
		flag: 'ğŸ‡²ğŸ‡¸'
	},
	{
		code: 'ma',
		flag: 'ğŸ‡²ğŸ‡¦'
	},
	{
		code: 'mz',
		flag: 'ğŸ‡²ğŸ‡¿'
	},
	{
		code: 'mm',
		flag: 'ğŸ‡²ğŸ‡²'
	},
	{
		code: 'na',
		flag: 'ğŸ‡³ğŸ‡¦'
	},
	{
		code: 'nr',
		flag: 'ğŸ‡³ğŸ‡·'
	},
	{
		code: 'np',
		flag: 'ğŸ‡³ğŸ‡µ'
	},
	{
		code: 'nl',
		flag: 'ğŸ‡³ğŸ‡±'
	},
	{
		code: 'nc',
		flag: 'ğŸ‡³ğŸ‡¨'
	},
	{
		code: 'nz',
		flag: 'ğŸ‡³ğŸ‡¿'
	},
	{
		code: 'ni',
		flag: 'ğŸ‡³ğŸ‡®'
	},
	{
		code: 'ne',
		flag: 'ğŸ‡³ğŸ‡ª'
	},
	{
		code: 'ng',
		flag: 'ğŸ‡³ğŸ‡¬'
	},
	{
		code: 'nu',
		flag: 'ğŸ‡³ğŸ‡º'
	},
	{
		code: 'nf',
		flag: 'ğŸ‡³ğŸ‡«'
	},
	{
		code: 'mk',
		flag: 'ğŸ‡²ğŸ‡°'
	},
	{
		code: 'mp',
		flag: 'ğŸ‡²ğŸ‡µ'
	},
	{
		code: 'no',
		flag: 'ğŸ‡³ğŸ‡´'
	},
	{
		code: 'om',
		flag: 'ğŸ‡´ğŸ‡²'
	},
	{
		code: 'pk',
		flag: 'ğŸ‡µğŸ‡°'
	},
	{
		code: 'pw',
		flag: 'ğŸ‡µğŸ‡¼'
	},
	{
		code: 'ps',
		flag: 'ğŸ‡µğŸ‡¸'
	},
	{
		code: 'pa',
		flag: 'ğŸ‡µğŸ‡¦'
	},
	{
		code: 'pg',
		flag: 'ğŸ‡µğŸ‡¬'
	},
	{
		code: 'py',
		flag: 'ğŸ‡µğŸ‡¾'
	},
	{
		code: 'pe',
		flag: 'ğŸ‡µğŸ‡ª'
	},
	{
		code: 'ph',
		flag: 'ğŸ‡µğŸ‡­'
	},
	{
		code: 'pn',
		flag: 'ğŸ‡µğŸ‡³'
	},
	{
		code: 'pl',
		flag: 'ğŸ‡µğŸ‡±'
	},
	{
		code: 'pt',
		flag: 'ğŸ‡µğŸ‡¹'
	},
	{
		code: 'pr',
		flag: 'ğŸ‡µğŸ‡·'
	},
	{
		code: 'qa',
		flag: 'ğŸ‡¶ğŸ‡¦'
	},
	{
		code: 'ro',
		flag: 'ğŸ‡·ğŸ‡´'
	},
	{
		code: 'ru',
		flag: 'ğŸ‡·ğŸ‡º'
	},
	{
		code: 'rw',
		flag: 'ğŸ‡·ğŸ‡¼'
	},
	{
		code: 're',
		flag: 'ğŸ‡·ğŸ‡ª'
	},
	{
		code: 'bl',
		flag: 'ğŸ‡§ğŸ‡±'
	},
	{
		code: 'sh',
		flag: 'ğŸ‡¸ğŸ‡­'
	},
	{
		code: 'kn',
		flag: 'ğŸ‡°ğŸ‡³'
	},
	{
		code: 'lc',
		flag: 'ğŸ‡±ğŸ‡¨'
	},
	{
		code: 'mf',
		flag: 'ğŸ‡²ğŸ‡«'
	},
	{
		code: 'pm',
		flag: 'ğŸ‡µğŸ‡²'
	},
	{
		code: 'vc',
		flag: 'ğŸ‡»ğŸ‡¨'
	},
	{
		code: 'ws',
		flag: 'ğŸ‡¼ğŸ‡¸'
	},
	{
		code: 'sm',
		flag: 'ğŸ‡¸ğŸ‡²'
	},
	{
		code: 'st',
		flag: 'ğŸ‡¸ğŸ‡¹'
	},
	{
		code: 'sa',
		flag: 'ğŸ‡¸ğŸ‡¦'
	},
	{
		code: 'sn',
		flag: 'ğŸ‡¸ğŸ‡³'
	},
	{
		code: 'rs',
		flag: 'ğŸ‡·ğŸ‡¸'
	},
	{
		code: 'sc',
		flag: 'ğŸ‡¸ğŸ‡¨'
	},
	{
		code: 'sl',
		flag: 'ğŸ‡¸ğŸ‡±'
	},
	{
		code: 'sg',
		flag: 'ğŸ‡¸ğŸ‡¬'
	},
	{
		code: 'sx',
		flag: 'ğŸ‡¸ğŸ‡½'
	},
	{
		code: 'sk',
		flag: 'ğŸ‡¸ğŸ‡°'
	},
	{
		code: 'si',
		flag: 'ğŸ‡¸ğŸ‡®'
	},
	{
		code: 'sb',
		flag: 'ğŸ‡¸ğŸ‡§'
	},
	{
		code: 'so',
		flag: 'ğŸ‡¸ğŸ‡´'
	},
	{
		code: 'za',
		flag: 'ğŸ‡¿ğŸ‡¦'
	},
	{
		code: 'gs',
		flag: 'ğŸ‡¬ğŸ‡¸'
	},
	{
		code: 'ss',
		flag: 'ğŸ‡¸ğŸ‡¸'
	},
	{
		code: 'es',
		flag: 'ğŸ‡ªğŸ‡¸'
	},
	{
		code: 'lk',
		flag: 'ğŸ‡±ğŸ‡°'
	},
	{
		code: 'sd',
		flag: 'ğŸ‡¸ğŸ‡©'
	},
	{
		code: 'sr',
		flag: 'ğŸ‡¸ğŸ‡·'
	},
	{
		code: 'sj',
		flag: 'ğŸ‡¸ğŸ‡¯'
	},
	{
		code: 'se',
		flag: 'ğŸ‡¸ğŸ‡ª'
	},
	{
		code: 'ch',
		flag: 'ğŸ‡¨ğŸ‡­'
	},
	{
		code: 'sy',
		flag: 'ğŸ‡¸ğŸ‡¾'
	},
	{
		code: 'tw',
		flag: 'ğŸ‡¹ğŸ‡¼'
	},
	{
		code: 'tj',
		flag: 'ğŸ‡¹ğŸ‡¯'
	},
	{
		code: 'tz',
		flag: 'ğŸ‡¹ğŸ‡¿'
	},
	{
		code: 'th',
		flag: 'ğŸ‡¹ğŸ‡­'
	},
	{
		code: 'tl',
		flag: 'ğŸ‡¹ğŸ‡±'
	},
	{
		code: 'tg',
		flag: 'ğŸ‡¹ğŸ‡¬'
	},
	{
		code: 'tk',
		flag: 'ğŸ‡¹ğŸ‡°'
	},
	{
		code: 'to',
		flag: 'ğŸ‡¹ğŸ‡´'
	},
	{
		code: 'tt',
		flag: 'ğŸ‡¹ğŸ‡¹'
	},
	{
		code: 'tn',
		flag: 'ğŸ‡¹ğŸ‡³'
	},
	{
		code: 'tm',
		flag: 'ğŸ‡¹ğŸ‡²'
	},
	{
		code: 'tc',
		flag: 'ğŸ‡¹ğŸ‡¨'
	},
	{
		code: 'tv',
		flag: 'ğŸ‡¹ğŸ‡»'
	},
	{
		code: 'tr',
		flag: 'ğŸ‡¹ğŸ‡·'
	},
	{
		code: 'ug',
		flag: 'ğŸ‡ºğŸ‡¬'
	},
	{
		code: 'ua',
		flag: 'ğŸ‡ºğŸ‡¦'
	},
	{
		code: 'ae',
		flag: 'ğŸ‡¦ğŸ‡ª'
	},
	{
		code: 'gb',
		flag: 'ğŸ‡¬ğŸ‡§'
	},
	{
		code: 'um',
		flag: 'ğŸ‡ºğŸ‡²'
	},
	{
		code: 'us',
		flag: 'ğŸ‡ºğŸ‡¸'
	},
	{
		code: 'uy',
		flag: 'ğŸ‡ºğŸ‡¾'
	},
	{
		code: 'uz',
		flag: 'ğŸ‡ºğŸ‡¿'
	},
	{
		code: 'vu',
		flag: 'ğŸ‡»ğŸ‡º'
	},
	{
		code: 've',
		flag: 'ğŸ‡»ğŸ‡ª'
	},
	{
		code: 'vn',
		flag: 'ğŸ‡»ğŸ‡³'
	},
	{
		code: 'vg',
		flag: 'ğŸ‡»ğŸ‡¬'
	},
	{
		code: 'vi',
		flag: 'ğŸ‡»ğŸ‡®'
	},
	{
		code: 'wf',
		flag: 'ğŸ‡¼ğŸ‡«'
	},
	{
		code: 'eh',
		flag: 'ğŸ‡ªğŸ‡­'
	},
	{
		code: 'ye',
		flag: 'ğŸ‡¾ğŸ‡ª'
	},
	{
		code: 'zm',
		flag: 'ğŸ‡¿ğŸ‡²'
	},
	{
		code: 'zw',
		flag: 'ğŸ‡¿ğŸ‡¼'
	},
	{
		code: 'ax',
		flag: 'ğŸ‡¦ğŸ‡½'
	}
] as const;

export type Country = (typeof countryList)[number];
export type CountryCode = Country['code'];
export const countryCode = countryList.map((c) => c.code);
export type CountryFlag = Country['flag'];
export function getCountry(code: CountryCode): Country {
	const country = countryList.find((c) => c.code === code);
	if (!country) {
		throw new Error(`Country with code ${code} not found`);
	}
	return country;
}

export function renderLocalizedCountryName(
	countryCode: CountryCode,
	locale: LanguageCode | undefined
): string {
	const regionNames = new Intl.DisplayNames([locale || 'en'], { type: 'region' });
	const country = regionNames.of(countryCode.toUpperCase());
	if (country) {
		return country;
	} else {
		// Fallback to the country code if the name is not found
		return countryCode;
	}
}
