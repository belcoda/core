/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2023 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  /**
   * **admins**
   * - Table in database
   */
  export namespace admins {
    export type Table = 'admins';
    export interface Selectable {
      /**
      * **admins.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **admins.api_key**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      api_key: string;
      /**
      * **admins.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **admins.deleted_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deleted_at: Date | null;
      /**
      * **admins.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **admins.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string;
      /**
      * **admins.google_access_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_access_token: string | null;
      /**
      * **admins.google_expires_in**
      * - `text` in database
      * - Nullable, no default
      */
      google_expires_in: string | null;
      /**
      * **admins.google_id**
      * - `text` in database
      * - Nullable, no default
      */
      google_id: string | null;
      /**
      * **admins.google_refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_refresh_token: string | null;
      /**
      * **admins.google_token_type**
      * - `text` in database
      * - Nullable, no default
      */
      google_token_type: string | null;
      /**
      * **admins.has_signed_in**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_signed_in: boolean;
      /**
      * **admins.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('admins_id_seq'::regclass)`
      */
      id: number;
      /**
      * **admins.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **admins.notification_channel**
      * - `text` in database
      * - `NOT NULL`, default: `'email'::text`
      */
      notification_channel: string;
      /**
      * **admins.notification_schedule**
      * - `text` in database
      * - `NOT NULL`, default: `'daily'::text`
      */
      notification_schedule: string;
      /**
      * **admins.permissions**
      * - `admin_permissions` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'["all"]'::jsonb`
      */
      permissions: c.PgAdmin_permissions;
      /**
      * **admins.profile_picture_url**
      * - `text` in database
      * - Nullable, no default
      */
      profile_picture_url: string | null;
      /**
      * **admins.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **admins.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **admins.api_key**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      api_key: string;
      /**
      * **admins.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **admins.deleted_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deleted_at: db.TimestampTzString | null;
      /**
      * **admins.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string;
      /**
      * **admins.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string;
      /**
      * **admins.google_access_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_access_token: string | null;
      /**
      * **admins.google_expires_in**
      * - `text` in database
      * - Nullable, no default
      */
      google_expires_in: string | null;
      /**
      * **admins.google_id**
      * - `text` in database
      * - Nullable, no default
      */
      google_id: string | null;
      /**
      * **admins.google_refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_refresh_token: string | null;
      /**
      * **admins.google_token_type**
      * - `text` in database
      * - Nullable, no default
      */
      google_token_type: string | null;
      /**
      * **admins.has_signed_in**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_signed_in: boolean;
      /**
      * **admins.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('admins_id_seq'::regclass)`
      */
      id: number;
      /**
      * **admins.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **admins.notification_channel**
      * - `text` in database
      * - `NOT NULL`, default: `'email'::text`
      */
      notification_channel: string;
      /**
      * **admins.notification_schedule**
      * - `text` in database
      * - `NOT NULL`, default: `'daily'::text`
      */
      notification_schedule: string;
      /**
      * **admins.permissions**
      * - `admin_permissions` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'["all"]'::jsonb`
      */
      permissions: c.PgAdmin_permissions;
      /**
      * **admins.profile_picture_url**
      * - `text` in database
      * - Nullable, no default
      */
      profile_picture_url: string | null;
      /**
      * **admins.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **admins.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.api_key**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      api_key?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.deleted_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.google_access_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_access_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.google_expires_in**
      * - `text` in database
      * - Nullable, no default
      */
      google_expires_in?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.google_id**
      * - `text` in database
      * - Nullable, no default
      */
      google_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.google_refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_refresh_token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.google_token_type**
      * - `text` in database
      * - Nullable, no default
      */
      google_token_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.has_signed_in**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_signed_in?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('admins_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.notification_channel**
      * - `text` in database
      * - `NOT NULL`, default: `'email'::text`
      */
      notification_channel?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.notification_schedule**
      * - `text` in database
      * - `NOT NULL`, default: `'daily'::text`
      */
      notification_schedule?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.permissions**
      * - `admin_permissions` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'["all"]'::jsonb`
      */
      permissions?: c.PgAdmin_permissions | db.Parameter<c.PgAdmin_permissions> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgAdmin_permissions | db.Parameter<c.PgAdmin_permissions> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.profile_picture_url**
      * - `text` in database
      * - Nullable, no default
      */
      profile_picture_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **admins.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **admins.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.api_key**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      api_key?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.deleted_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **admins.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **admins.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **admins.google_access_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_access_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **admins.google_expires_in**
      * - `text` in database
      * - Nullable, no default
      */
      google_expires_in?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **admins.google_id**
      * - `text` in database
      * - Nullable, no default
      */
      google_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **admins.google_refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_refresh_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **admins.google_token_type**
      * - `text` in database
      * - Nullable, no default
      */
      google_token_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **admins.has_signed_in**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_signed_in?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('admins_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **admins.notification_channel**
      * - `text` in database
      * - `NOT NULL`, default: `'email'::text`
      */
      notification_channel?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.notification_schedule**
      * - `text` in database
      * - `NOT NULL`, default: `'daily'::text`
      */
      notification_schedule?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.permissions**
      * - `admin_permissions` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'["all"]'::jsonb`
      */
      permissions?: c.PgAdmin_permissions | db.Parameter<c.PgAdmin_permissions> | db.DefaultType | db.SQLFragment;
      /**
      * **admins.profile_picture_url**
      * - `text` in database
      * - Nullable, no default
      */
      profile_picture_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **admins.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **admins.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.api_key**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      api_key?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.deleted_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **admins.full_name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      full_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **admins.google_access_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_access_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.google_expires_in**
      * - `text` in database
      * - Nullable, no default
      */
      google_expires_in?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.google_id**
      * - `text` in database
      * - Nullable, no default
      */
      google_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.google_refresh_token**
      * - `text` in database
      * - Nullable, no default
      */
      google_refresh_token?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.google_token_type**
      * - `text` in database
      * - Nullable, no default
      */
      google_token_type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.has_signed_in**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      has_signed_in?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('admins_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **admins.notification_channel**
      * - `text` in database
      * - `NOT NULL`, default: `'email'::text`
      */
      notification_channel?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.notification_schedule**
      * - `text` in database
      * - `NOT NULL`, default: `'daily'::text`
      */
      notification_schedule?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.permissions**
      * - `admin_permissions` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'["all"]'::jsonb`
      */
      permissions?: c.PgAdmin_permissions | db.Parameter<c.PgAdmin_permissions> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgAdmin_permissions | db.Parameter<c.PgAdmin_permissions> | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.profile_picture_url**
      * - `text` in database
      * - Nullable, no default
      */
      profile_picture_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **admins.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'admins_email_unique' | 'admins_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **functions**
   * - Table in database
   */
  export namespace functions {
    export type Table = 'functions';
    export interface Selectable {
      /**
      * **functions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **functions.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **functions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **functions.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **functions.run_as**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      run_as: number;
      /**
      * **functions.steps**
      * - `function_steps` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      steps: c.PgFunction_steps;
      /**
      * **functions.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **functions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **functions.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **functions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **functions.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **functions.run_as**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      run_as: number;
      /**
      * **functions.steps**
      * - `function_steps` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      steps: c.PgFunction_steps;
      /**
      * **functions.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **functions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **functions.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **functions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **functions.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **functions.run_as**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      run_as?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **functions.steps**
      * - `function_steps` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      steps?: c.PgFunction_steps | db.Parameter<c.PgFunction_steps> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgFunction_steps | db.Parameter<c.PgFunction_steps> | db.SQLFragment | db.ParentColumn>;
      /**
      * **functions.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **functions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **functions.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **functions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **functions.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **functions.run_as**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      run_as: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **functions.steps**
      * - `function_steps` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      steps?: c.PgFunction_steps | db.Parameter<c.PgFunction_steps> | db.DefaultType | db.SQLFragment;
      /**
      * **functions.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **functions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **functions.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **functions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **functions.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **functions.run_as**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      run_as?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **functions.steps**
      * - `function_steps` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'[]'::jsonb`
      */
      steps?: c.PgFunction_steps | db.Parameter<c.PgFunction_steps> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgFunction_steps | db.Parameter<c.PgFunction_steps> | db.DefaultType | db.SQLFragment>;
      /**
      * **functions.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **instances**
   * - Table in database
   */
  export namespace instances {
    export type Table = 'instances';
    export interface Selectable {
      /**
      * **instances.country**
      * - `text` in database
      * - `NOT NULL`, default: `'us'::text`
      */
      country: string;
      /**
      * **instances.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **instances.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('instances_id_seq'::regclass)`
      */
      id: number;
      /**
      * **instances.installed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      installed: boolean;
      /**
      * **instances.language**
      * - `text` in database
      * - `NOT NULL`, default: `'en'::text`
      */
      language: string;
      /**
      * **instances.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **instances.owner_email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      owner_email: string;
      /**
      * **instances.plan**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      plan: string;
      /**
      * **instances.secrets**
      * - `instance_secrets` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      secrets: c.PgInstance_secrets;
      /**
      * **instances.settings**
      * - `instance_settings` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      settings: c.PgInstance_settings;
      /**
      * **instances.slug**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slug: string;
      /**
      * **instances.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **instances.country**
      * - `text` in database
      * - `NOT NULL`, default: `'us'::text`
      */
      country: string;
      /**
      * **instances.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **instances.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('instances_id_seq'::regclass)`
      */
      id: number;
      /**
      * **instances.installed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      installed: boolean;
      /**
      * **instances.language**
      * - `text` in database
      * - `NOT NULL`, default: `'en'::text`
      */
      language: string;
      /**
      * **instances.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **instances.owner_email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      owner_email: string;
      /**
      * **instances.plan**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      plan: string;
      /**
      * **instances.secrets**
      * - `instance_secrets` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      secrets: c.PgInstance_secrets;
      /**
      * **instances.settings**
      * - `instance_settings` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      settings: c.PgInstance_settings;
      /**
      * **instances.slug**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slug: string;
      /**
      * **instances.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **instances.country**
      * - `text` in database
      * - `NOT NULL`, default: `'us'::text`
      */
      country?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('instances_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.installed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      installed?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.language**
      * - `text` in database
      * - `NOT NULL`, default: `'en'::text`
      */
      language?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.owner_email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      owner_email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.plan**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      plan?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.secrets**
      * - `instance_secrets` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      secrets?: c.PgInstance_secrets | db.Parameter<c.PgInstance_secrets> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInstance_secrets | db.Parameter<c.PgInstance_secrets> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.settings**
      * - `instance_settings` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      settings?: c.PgInstance_settings | db.Parameter<c.PgInstance_settings> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInstance_settings | db.Parameter<c.PgInstance_settings> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.slug**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **instances.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **instances.country**
      * - `text` in database
      * - `NOT NULL`, default: `'us'::text`
      */
      country?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('instances_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.installed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      installed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.language**
      * - `text` in database
      * - `NOT NULL`, default: `'en'::text`
      */
      language?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **instances.owner_email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      owner_email: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **instances.plan**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      plan?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.secrets**
      * - `instance_secrets` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      secrets?: c.PgInstance_secrets | db.Parameter<c.PgInstance_secrets> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.settings**
      * - `instance_settings` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      settings?: c.PgInstance_settings | db.Parameter<c.PgInstance_settings> | db.DefaultType | db.SQLFragment;
      /**
      * **instances.slug**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slug: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **instances.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **instances.country**
      * - `text` in database
      * - `NOT NULL`, default: `'us'::text`
      */
      country?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('instances_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.installed**
      * - `bool` in database
      * - `NOT NULL`, default: `false`
      */
      installed?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.language**
      * - `text` in database
      * - `NOT NULL`, default: `'en'::text`
      */
      language?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **instances.owner_email**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      owner_email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **instances.plan**
      * - `text` in database
      * - `NOT NULL`, default: `'free'::text`
      */
      plan?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.secrets**
      * - `instance_secrets` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      secrets?: c.PgInstance_secrets | db.Parameter<c.PgInstance_secrets> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgInstance_secrets | db.Parameter<c.PgInstance_secrets> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.settings**
      * - `instance_settings` (base type: `jsonb`) in database
      * - `NOT NULL`, default: `'{}'::jsonb`
      */
      settings?: c.PgInstance_settings | db.Parameter<c.PgInstance_settings> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgInstance_settings | db.Parameter<c.PgInstance_settings> | db.DefaultType | db.SQLFragment>;
      /**
      * **instances.slug**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **instances.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'instances_name_unique' | 'instances_owner_email_unique' | 'instances_pkey' | 'instances_slug_unique';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **sessions**
   * - Table in database
   */
  export namespace sessions {
    export type Table = 'sessions';
    export interface Selectable {
      /**
      * **sessions.admin_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      admin_id: number;
      /**
      * **sessions.code**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      code: string;
      /**
      * **sessions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **sessions.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '1 day'::interval)`
      */
      expires_at: Date;
      /**
      * **sessions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
    }
    export interface JSONSelectable {
      /**
      * **sessions.admin_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      admin_id: number;
      /**
      * **sessions.code**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      code: string;
      /**
      * **sessions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **sessions.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '1 day'::interval)`
      */
      expires_at: db.TimestampTzString;
      /**
      * **sessions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
    }
    export interface Whereable {
      /**
      * **sessions.admin_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      admin_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessions.code**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      code?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessions.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '1 day'::interval)`
      */
      expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **sessions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **sessions.admin_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      admin_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **sessions.code**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      code?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      /**
      * **sessions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **sessions.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '1 day'::interval)`
      */
      expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **sessions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **sessions.admin_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      admin_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **sessions.code**
      * - `uuid` in database
      * - `NOT NULL`, default: `uuid_generate_v4()`
      */
      code?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      /**
      * **sessions.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **sessions.expires_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '1 day'::interval)`
      */
      expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **sessions.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'sessions_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **spatial_ref_sys**
   * - Table in database
   */
  export namespace spatial_ref_sys {
    export type Table = 'spatial_ref_sys';
    export interface Selectable {
      /**
      * **spatial_ref_sys.auth_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      auth_name: string | null;
      /**
      * **spatial_ref_sys.auth_srid**
      * - `int4` in database
      * - Nullable, no default
      */
      auth_srid: number | null;
      /**
      * **spatial_ref_sys.proj4text**
      * - `varchar` in database
      * - Nullable, no default
      */
      proj4text: string | null;
      /**
      * **spatial_ref_sys.srid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      srid: number;
      /**
      * **spatial_ref_sys.srtext**
      * - `varchar` in database
      * - Nullable, no default
      */
      srtext: string | null;
    }
    export interface JSONSelectable {
      /**
      * **spatial_ref_sys.auth_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      auth_name: string | null;
      /**
      * **spatial_ref_sys.auth_srid**
      * - `int4` in database
      * - Nullable, no default
      */
      auth_srid: number | null;
      /**
      * **spatial_ref_sys.proj4text**
      * - `varchar` in database
      * - Nullable, no default
      */
      proj4text: string | null;
      /**
      * **spatial_ref_sys.srid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      srid: number;
      /**
      * **spatial_ref_sys.srtext**
      * - `varchar` in database
      * - Nullable, no default
      */
      srtext: string | null;
    }
    export interface Whereable {
      /**
      * **spatial_ref_sys.auth_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      auth_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spatial_ref_sys.auth_srid**
      * - `int4` in database
      * - Nullable, no default
      */
      auth_srid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spatial_ref_sys.proj4text**
      * - `varchar` in database
      * - Nullable, no default
      */
      proj4text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spatial_ref_sys.srid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      srid?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **spatial_ref_sys.srtext**
      * - `varchar` in database
      * - Nullable, no default
      */
      srtext?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **spatial_ref_sys.auth_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      auth_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **spatial_ref_sys.auth_srid**
      * - `int4` in database
      * - Nullable, no default
      */
      auth_srid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **spatial_ref_sys.proj4text**
      * - `varchar` in database
      * - Nullable, no default
      */
      proj4text?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **spatial_ref_sys.srid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      srid: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **spatial_ref_sys.srtext**
      * - `varchar` in database
      * - Nullable, no default
      */
      srtext?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **spatial_ref_sys.auth_name**
      * - `varchar` in database
      * - Nullable, no default
      */
      auth_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **spatial_ref_sys.auth_srid**
      * - `int4` in database
      * - Nullable, no default
      */
      auth_srid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **spatial_ref_sys.proj4text**
      * - `varchar` in database
      * - Nullable, no default
      */
      proj4text?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **spatial_ref_sys.srid**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      srid?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **spatial_ref_sys.srtext**
      * - `varchar` in database
      * - Nullable, no default
      */
      srtext?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'spatial_ref_sys_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tags**
   * - Table in database
   */
  export namespace tags {
    export type Table = 'tags';
    export interface Selectable {
      /**
      * **tags.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **tags.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **tags.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tags_id_seq'::regclass)`
      */
      id: number;
      /**
      * **tags.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **tags.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
    }
    export interface JSONSelectable {
      /**
      * **tags.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active: boolean;
      /**
      * **tags.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **tags.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tags_id_seq'::regclass)`
      */
      id: number;
      /**
      * **tags.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **tags.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
    }
    export interface Whereable {
      /**
      * **tags.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tags.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tags.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tags_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tags.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tags.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tags.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      /**
      * **tags.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **tags.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tags_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **tags.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tags.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tags.active**
      * - `bool` in database
      * - `NOT NULL`, default: `true`
      */
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      /**
      * **tags.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tags.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tags_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **tags.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tags.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tags.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tags_instance_id_name_unique' | 'tags_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **task_taggings**
   * - Table in database
   */
  export namespace task_taggings {
    export type Table = 'task_taggings';
    export interface Selectable {
      /**
      * **task_taggings.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **task_taggings.tag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tag_id: number;
      /**
      * **task_taggings.task_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      task_id: number;
    }
    export interface JSONSelectable {
      /**
      * **task_taggings.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **task_taggings.tag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tag_id: number;
      /**
      * **task_taggings.task_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      task_id: number;
    }
    export interface Whereable {
      /**
      * **task_taggings.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **task_taggings.tag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tag_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **task_taggings.task_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      task_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **task_taggings.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **task_taggings.tag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tag_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **task_taggings.task_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      task_id: number | db.Parameter<number> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **task_taggings.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **task_taggings.tag_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      tag_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **task_taggings.task_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      task_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
    }
    export type UniqueIndex = 'task_taggings_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **tasks**
   * - Table in database
   */
  export namespace tasks {
    export type Table = 'tasks';
    export interface Selectable {
      /**
      * **tasks.assigned_to**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      assigned_to: number;
      /**
      * **tasks.completed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completed_at: Date | null;
      /**
      * **tasks.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: Date;
      /**
      * **tasks.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **tasks.details**
      * - `task_details` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      details: c.PgTask_details;
      /**
      * **tasks.due_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_at: Date | null;
      /**
      * **tasks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tasks_id_seq'::regclass)`
      */
      id: number;
      /**
      * **tasks.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **tasks.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **tasks.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: Date;
      /**
      * **tasks.viewed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      viewed_at: Date | null;
    }
    export interface JSONSelectable {
      /**
      * **tasks.assigned_to**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      assigned_to: number;
      /**
      * **tasks.completed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completed_at: db.TimestampTzString | null;
      /**
      * **tasks.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at: db.TimestampTzString;
      /**
      * **tasks.description**
      * - `text` in database
      * - Nullable, no default
      */
      description: string | null;
      /**
      * **tasks.details**
      * - `task_details` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      details: c.PgTask_details;
      /**
      * **tasks.due_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_at: db.TimestampTzString | null;
      /**
      * **tasks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tasks_id_seq'::regclass)`
      */
      id: number;
      /**
      * **tasks.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number;
      /**
      * **tasks.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string;
      /**
      * **tasks.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at: db.TimestampTzString;
      /**
      * **tasks.viewed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      viewed_at: db.TimestampTzString | null;
    }
    export interface Whereable {
      /**
      * **tasks.assigned_to**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      assigned_to?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.completed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.details**
      * - `task_details` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      details?: c.PgTask_details | db.Parameter<c.PgTask_details> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTask_details | db.Parameter<c.PgTask_details> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.due_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tasks_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **tasks.viewed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      viewed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **tasks.assigned_to**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      assigned_to: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tasks.completed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tasks.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **tasks.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tasks.details**
      * - `task_details` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      details: c.PgTask_details | db.Parameter<c.PgTask_details> | db.SQLFragment;
      /**
      * **tasks.due_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **tasks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tasks_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      /**
      * **tasks.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id: number | db.Parameter<number> | db.SQLFragment;
      /**
      * **tasks.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **tasks.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      /**
      * **tasks.viewed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      viewed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **tasks.assigned_to**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      assigned_to?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tasks.completed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tasks.created_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tasks.description**
      * - `text` in database
      * - Nullable, no default
      */
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tasks.details**
      * - `task_details` (base type: `jsonb`) in database
      * - `NOT NULL`, no default
      */
      details?: c.PgTask_details | db.Parameter<c.PgTask_details> | db.SQLFragment | db.SQLFragment<any, c.PgTask_details | db.Parameter<c.PgTask_details> | db.SQLFragment>;
      /**
      * **tasks.due_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      due_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **tasks.id**
      * - `int4` in database
      * - `NOT NULL`, default: `nextval('tasks_id_seq'::regclass)`
      */
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      /**
      * **tasks.instance_id**
      * - `int4` in database
      * - `NOT NULL`, no default
      */
      instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      /**
      * **tasks.name**
      * - `text` in database
      * - `NOT NULL`, no default
      */
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **tasks.updated_at**
      * - `timestamptz` in database
      * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
      */
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      /**
      * **tasks.viewed_at**
      * - `timestamptz` in database
      * - Nullable, no default
      */
      viewed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'tasks_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = admins.Table | functions.Table | instances.Table | sessions.Table | spatial_ref_sys.Table | tags.Table | task_taggings.Table | tasks.Table;
    export type Selectable = admins.Selectable | functions.Selectable | instances.Selectable | sessions.Selectable | spatial_ref_sys.Selectable | tags.Selectable | task_taggings.Selectable | tasks.Selectable;
    export type JSONSelectable = admins.JSONSelectable | functions.JSONSelectable | instances.JSONSelectable | sessions.JSONSelectable | spatial_ref_sys.JSONSelectable | tags.JSONSelectable | task_taggings.JSONSelectable | tasks.JSONSelectable;
    export type Whereable = admins.Whereable | functions.Whereable | instances.Whereable | sessions.Whereable | spatial_ref_sys.Whereable | tags.Whereable | task_taggings.Whereable | tasks.Whereable;
    export type Insertable = admins.Insertable | functions.Insertable | instances.Insertable | sessions.Insertable | spatial_ref_sys.Insertable | tags.Insertable | task_taggings.Insertable | tasks.Insertable;
    export type Updatable = admins.Updatable | functions.Updatable | instances.Updatable | sessions.Updatable | spatial_ref_sys.Updatable | tags.Updatable | task_taggings.Updatable | tasks.Updatable;
    export type UniqueIndex = admins.UniqueIndex | functions.UniqueIndex | instances.UniqueIndex | sessions.UniqueIndex | spatial_ref_sys.UniqueIndex | tags.UniqueIndex | task_taggings.UniqueIndex | tasks.UniqueIndex;
    export type Column = admins.Column | functions.Column | instances.Column | sessions.Column | spatial_ref_sys.Column | tags.Column | task_taggings.Column | tasks.Column;
  
    export type AllBaseTables = [admins.Table, functions.Table, instances.Table, sessions.Table, spatial_ref_sys.Table, tags.Table, task_taggings.Table, tasks.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [admins.Table, functions.Table, instances.Table, sessions.Table, spatial_ref_sys.Table, tags.Table, task_taggings.Table, tasks.Table];
  }



  /* === schema: people === */

  export namespace people {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **people.custom_field_values**
     * - Table in database
     */
    export namespace custom_field_values {
      export type Table = 'people.custom_field_values';
      export interface Selectable {
        /**
        * **people.custom_field_values.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.custom_field_values.custom_field_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        custom_field_id: number;
        /**
        * **people.custom_field_values.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **people.custom_field_values.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **people.custom_field_values.value**
        * - `text` in database
        * - Nullable, no default
        */
        value: string | null;
      }
      export interface JSONSelectable {
        /**
        * **people.custom_field_values.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.custom_field_values.custom_field_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        custom_field_id: number;
        /**
        * **people.custom_field_values.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **people.custom_field_values.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **people.custom_field_values.value**
        * - `text` in database
        * - Nullable, no default
        */
        value: string | null;
      }
      export interface Whereable {
        /**
        * **people.custom_field_values.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_field_values.custom_field_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        custom_field_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_field_values.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_field_values.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_field_values.value**
        * - `text` in database
        * - Nullable, no default
        */
        value?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.custom_field_values.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.custom_field_values.custom_field_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        custom_field_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.custom_field_values.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.custom_field_values.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.custom_field_values.value**
        * - `text` in database
        * - Nullable, no default
        */
        value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.custom_field_values.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.custom_field_values.custom_field_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        custom_field_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.custom_field_values.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.custom_field_values.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.custom_field_values.value**
        * - `text` in database
        * - Nullable, no default
        */
        value?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'custom_field_values_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.custom_fields**
     * - Table in database
     */
    export namespace custom_fields {
      export type Table = 'people.custom_fields';
      export interface Selectable {
        /**
        * **people.custom_fields.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.custom_fields.description**
        * - `text` in database
        * - Nullable, no default
        */
        description: string | null;
        /**
        * **people.custom_fields.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.custom_fields_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.custom_fields.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.custom_fields.label**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        label: string;
        /**
        * **people.custom_fields.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **people.custom_fields.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **people.custom_fields.type**
        * - `text` in database
        * - `NOT NULL`, default: `'text'::text`
        */
        type: string;
        /**
        * **people.custom_fields.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **people.custom_fields.validation**
        * - `validation_rules` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'[]'::jsonb`
        */
        validation: c.PgValidation_rules;
      }
      export interface JSONSelectable {
        /**
        * **people.custom_fields.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.custom_fields.description**
        * - `text` in database
        * - Nullable, no default
        */
        description: string | null;
        /**
        * **people.custom_fields.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.custom_fields_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.custom_fields.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.custom_fields.label**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        label: string;
        /**
        * **people.custom_fields.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **people.custom_fields.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **people.custom_fields.type**
        * - `text` in database
        * - `NOT NULL`, default: `'text'::text`
        */
        type: string;
        /**
        * **people.custom_fields.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **people.custom_fields.validation**
        * - `validation_rules` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'[]'::jsonb`
        */
        validation: c.PgValidation_rules;
      }
      export interface Whereable {
        /**
        * **people.custom_fields.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.custom_fields_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.label**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        label?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.type**
        * - `text` in database
        * - `NOT NULL`, default: `'text'::text`
        */
        type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.custom_fields.validation**
        * - `validation_rules` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'[]'::jsonb`
        */
        validation?: c.PgValidation_rules | db.Parameter<c.PgValidation_rules> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgValidation_rules | db.Parameter<c.PgValidation_rules> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.custom_fields.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.custom_fields.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.custom_fields.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.custom_fields_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.custom_fields.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.custom_fields.label**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        label: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.custom_fields.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.custom_fields.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.custom_fields.type**
        * - `text` in database
        * - `NOT NULL`, default: `'text'::text`
        */
        type?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **people.custom_fields.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.custom_fields.validation**
        * - `validation_rules` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'[]'::jsonb`
        */
        validation?: c.PgValidation_rules | db.Parameter<c.PgValidation_rules> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.custom_fields.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.custom_fields.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.custom_fields.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.custom_fields_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.custom_fields.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.custom_fields.label**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        label?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.custom_fields.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.custom_fields.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.custom_fields.type**
        * - `text` in database
        * - `NOT NULL`, default: `'text'::text`
        */
        type?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.custom_fields.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.custom_fields.validation**
        * - `validation_rules` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'[]'::jsonb`
        */
        validation?: c.PgValidation_rules | db.Parameter<c.PgValidation_rules> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgValidation_rules | db.Parameter<c.PgValidation_rules> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'custom_fields_instance_id_name_unique' | 'custom_fields_instance_id_slug_unique' | 'custom_fields_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.group_members**
     * - Table in database
     */
    export namespace group_members {
      export type Table = 'people.group_members';
      export interface Selectable {
        /**
        * **people.group_members.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.group_members.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id: number;
        /**
        * **people.group_members.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **people.group_members.status**
        * - `text` in database
        * - `NOT NULL`, default: `'member'::text`
        */
        status: string;
      }
      export interface JSONSelectable {
        /**
        * **people.group_members.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.group_members.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id: number;
        /**
        * **people.group_members.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **people.group_members.status**
        * - `text` in database
        * - `NOT NULL`, default: `'member'::text`
        */
        status: string;
      }
      export interface Whereable {
        /**
        * **people.group_members.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.group_members.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.group_members.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.group_members.status**
        * - `text` in database
        * - `NOT NULL`, default: `'member'::text`
        */
        status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.group_members.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.group_members.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.group_members.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.group_members.status**
        * - `text` in database
        * - `NOT NULL`, default: `'member'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.group_members.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.group_members.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.group_members.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.group_members.status**
        * - `text` in database
        * - `NOT NULL`, default: `'member'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'group_members_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.groups**
     * - Table in database
     */
    export namespace groups {
      export type Table = 'people.groups';
      export interface Selectable {
        /**
        * **people.groups.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.groups.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **people.groups.description**
        * - `text` in database
        * - Nullable, no default
        */
        description: string | null;
        /**
        * **people.groups.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.groups_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.groups.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.groups.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **people.groups.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id: number | null;
        /**
        * **people.groups.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **people.groups.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id: string | null;
      }
      export interface JSONSelectable {
        /**
        * **people.groups.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.groups.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **people.groups.description**
        * - `text` in database
        * - Nullable, no default
        */
        description: string | null;
        /**
        * **people.groups.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.groups_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.groups.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.groups.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **people.groups.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id: number | null;
        /**
        * **people.groups.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **people.groups.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id: string | null;
      }
      export interface Whereable {
        /**
        * **people.groups.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.groups_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.groups.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.groups.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.groups.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.groups.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.groups.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.groups_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.groups.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.groups.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.groups.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.groups.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.groups.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.groups.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.groups.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.groups.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.groups.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.groups_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.groups.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.groups.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.groups.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.groups.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.groups.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'groups_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.imports**
     * - Table in database
     */
    export namespace imports {
      export type Table = 'people.imports';
      export interface Selectable {
        /**
        * **people.imports.completed_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        completed_at: Date;
        /**
        * **people.imports.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.imports.csv_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        csv_url: string;
        /**
        * **people.imports.failed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_rows: number;
        /**
        * **people.imports.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.imports_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.imports.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.imports.processed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        processed_rows: number;
        /**
        * **people.imports.status**
        * - `text` in database
        * - `NOT NULL`, default: `'pending'::text`
        */
        status: string;
        /**
        * **people.imports.total_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        total_rows: number;
      }
      export interface JSONSelectable {
        /**
        * **people.imports.completed_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        completed_at: db.TimestampTzString;
        /**
        * **people.imports.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.imports.csv_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        csv_url: string;
        /**
        * **people.imports.failed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_rows: number;
        /**
        * **people.imports.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.imports_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.imports.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.imports.processed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        processed_rows: number;
        /**
        * **people.imports.status**
        * - `text` in database
        * - `NOT NULL`, default: `'pending'::text`
        */
        status: string;
        /**
        * **people.imports.total_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        total_rows: number;
      }
      export interface Whereable {
        /**
        * **people.imports.completed_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.csv_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        csv_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.failed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_rows?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.imports_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.processed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        processed_rows?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.status**
        * - `text` in database
        * - `NOT NULL`, default: `'pending'::text`
        */
        status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.imports.total_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        total_rows?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.imports.completed_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.imports.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.imports.csv_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        csv_url: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.imports.failed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_rows?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.imports.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.imports_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.imports.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.imports.processed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        processed_rows?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.imports.status**
        * - `text` in database
        * - `NOT NULL`, default: `'pending'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **people.imports.total_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        total_rows?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.imports.completed_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.imports.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.imports.csv_url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        csv_url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.imports.failed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        failed_rows?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.imports.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.imports_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.imports.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.imports.processed_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        processed_rows?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.imports.status**
        * - `text` in database
        * - `NOT NULL`, default: `'pending'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.imports.total_rows**
        * - `int4` in database
        * - `NOT NULL`, default: `0`
        */
        total_rows?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'imports_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.interactions**
     * - Table in database
     */
    export namespace interactions {
      export type Table = 'people.interactions';
      export interface Selectable {
        /**
        * **people.interactions.admin_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        admin_id: number;
        /**
        * **people.interactions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details: c.PgInteraction_type | null;
        /**
        * **people.interactions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.interactions_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.interactions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.interactions.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
      }
      export interface JSONSelectable {
        /**
        * **people.interactions.admin_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        admin_id: number;
        /**
        * **people.interactions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details: c.PgInteraction_type | null;
        /**
        * **people.interactions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.interactions_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.interactions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.interactions.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
      }
      export interface Whereable {
        /**
        * **people.interactions.admin_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        admin_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.interactions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details?: c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.interactions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.interactions_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.interactions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.interactions.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.interactions.admin_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        admin_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.interactions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details?: c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.interactions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.interactions_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.interactions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.interactions.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.interactions.admin_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        admin_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.interactions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details?: c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.interactions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.interactions_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.interactions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.interactions.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'interactions_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.list_interactions**
     * - View in database
     */
    export namespace list_interactions {
      export type Table = 'people.list_interactions';
      export interface Selectable {
        /**
        * **people.list_interactions.admin_id**
        * - `int4` in database
        * - Nullable, no default
        */
        admin_id: number | null;
        /**
        * **people.list_interactions.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: Date | null;
        /**
        * **people.list_interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details: c.PgInteraction_type | null;
        /**
        * **people.list_interactions.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id: number | null;
        /**
        * **people.list_interactions.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id: number | null;
        /**
        * **people.list_interactions.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **people.list_interactions.type**
        * - `text` in database
        * - Nullable, no default
        */
        type: string | null;
      }
      export interface JSONSelectable {
        /**
        * **people.list_interactions.admin_id**
        * - `int4` in database
        * - Nullable, no default
        */
        admin_id: number | null;
        /**
        * **people.list_interactions.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: db.TimestampTzString | null;
        /**
        * **people.list_interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details: c.PgInteraction_type | null;
        /**
        * **people.list_interactions.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id: number | null;
        /**
        * **people.list_interactions.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id: number | null;
        /**
        * **people.list_interactions.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **people.list_interactions.type**
        * - `text` in database
        * - Nullable, no default
        */
        type: string | null;
      }
      export interface Whereable {
        /**
        * **people.list_interactions.admin_id**
        * - `int4` in database
        * - Nullable, no default
        */
        admin_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_interactions.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details?: c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_interactions.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_interactions.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_interactions.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_interactions.type**
        * - `text` in database
        * - Nullable, no default
        */
        type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.list_interactions.admin_id**
        * - `int4` in database
        * - Nullable, no default
        */
        admin_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.list_interactions.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.list_interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details?: c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.list_interactions.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.list_interactions.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.list_interactions.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.list_interactions.type**
        * - `text` in database
        * - Nullable, no default
        */
        type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.list_interactions.admin_id**
        * - `int4` in database
        * - Nullable, no default
        */
        admin_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.list_interactions.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.list_interactions.details**
        * - `interaction_type` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        details?: c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgInteraction_type | db.Parameter<c.PgInteraction_type> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.list_interactions.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.list_interactions.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.list_interactions.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.list_interactions.type**
        * - `text` in database
        * - Nullable, no default
        */
        type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = never;
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.list_people**
     * - Table in database
     */
    export namespace list_people {
      export type Table = 'people.list_people';
      export interface Selectable {
        /**
        * **people.list_people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.list_people.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number;
        /**
        * **people.list_people.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
      }
      export interface JSONSelectable {
        /**
        * **people.list_people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.list_people.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number;
        /**
        * **people.list_people.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
      }
      export interface Whereable {
        /**
        * **people.list_people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_people.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_people.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.list_people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.list_people.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.list_people.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.list_people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.list_people.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.list_people.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'list_people_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.list_view**
     * - View in database
     */
    export namespace list_view {
      export type Table = 'people.list_view';
      export interface Selectable {
        /**
        * **people.list_view.count**
        * - `int8` in database
        * - Nullable, no default
        */
        count: db.Int8String | null;
        /**
        * **people.list_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: Date | null;
        /**
        * **people.list_view.expires_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        expires_at: Date | null;
        /**
        * **people.list_view.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id: number | null;
        /**
        * **people.list_view.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id: number | null;
        /**
        * **people.list_view.name**
        * - `text` in database
        * - Nullable, no default
        */
        name: string | null;
        /**
        * **people.list_view.perpetual**
        * - `bool` in database
        * - Nullable, no default
        */
        perpetual: boolean | null;
        /**
        * **people.list_view.ready**
        * - `bool` in database
        * - Nullable, no default
        */
        ready: boolean | null;
        /**
        * **people.list_view.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: Date | null;
      }
      export interface JSONSelectable {
        /**
        * **people.list_view.count**
        * - `int8` in database
        * - Nullable, no default
        */
        count: number | null;
        /**
        * **people.list_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: db.TimestampTzString | null;
        /**
        * **people.list_view.expires_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        expires_at: db.TimestampTzString | null;
        /**
        * **people.list_view.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id: number | null;
        /**
        * **people.list_view.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id: number | null;
        /**
        * **people.list_view.name**
        * - `text` in database
        * - Nullable, no default
        */
        name: string | null;
        /**
        * **people.list_view.perpetual**
        * - `bool` in database
        * - Nullable, no default
        */
        perpetual: boolean | null;
        /**
        * **people.list_view.ready**
        * - `bool` in database
        * - Nullable, no default
        */
        ready: boolean | null;
        /**
        * **people.list_view.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: db.TimestampTzString | null;
      }
      export interface Whereable {
        /**
        * **people.list_view.count**
        * - `int8` in database
        * - Nullable, no default
        */
        count?: (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String | bigint) | db.Parameter<(number | db.Int8String | bigint)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.expires_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.name**
        * - `text` in database
        * - Nullable, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.perpetual**
        * - `bool` in database
        * - Nullable, no default
        */
        perpetual?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.ready**
        * - `bool` in database
        * - Nullable, no default
        */
        ready?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.list_view.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        [key: string]: never;
      }
      export interface Updatable {
        [key: string]: never;
      }
      export type UniqueIndex = never;
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.lists**
     * - Table in database
     */
    export namespace lists {
      export type Table = 'people.lists';
      export interface Selectable {
        /**
        * **people.lists.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.lists.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **people.lists.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '60 days'::interval)`
        */
        expires_at: Date;
        /**
        * **people.lists.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.lists_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.lists.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.lists.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **people.lists.perpetual**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        perpetual: boolean | null;
        /**
        * **people.lists.ready**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        ready: boolean | null;
        /**
        * **people.lists.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **people.lists.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.lists.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **people.lists.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '60 days'::interval)`
        */
        expires_at: db.TimestampTzString;
        /**
        * **people.lists.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.lists_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.lists.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.lists.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **people.lists.perpetual**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        perpetual: boolean | null;
        /**
        * **people.lists.ready**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        ready: boolean | null;
        /**
        * **people.lists.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **people.lists.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '60 days'::interval)`
        */
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.lists_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.perpetual**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        perpetual?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.ready**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        ready?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.lists.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.lists.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.lists.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.lists.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '60 days'::interval)`
        */
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.lists.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.lists_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.lists.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.lists.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.lists.perpetual**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        perpetual?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.lists.ready**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        ready?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.lists.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.lists.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.lists.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.lists.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(CURRENT_TIMESTAMP + '60 days'::interval)`
        */
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.lists.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.lists_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.lists.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.lists.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.lists.perpetual**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        perpetual?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.lists.ready**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        ready?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.lists.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'lists_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.people**
     * - Table in database
     */
    export namespace people {
      export type Table = 'people.people';
      export interface Selectable {
        /**
        * **people.people.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **people.people.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **people.people.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3: string | null;
        /**
        * **people.people.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4: string | null;
        /**
        * **people.people.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country: string;
        /**
        * **people.people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.people.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **people.people.details**
        * - `text` in database
        * - Nullable, no default
        */
        details: string | null;
        /**
        * **people.people.do_not_contact**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        do_not_contact: boolean | null;
        /**
        * **people.people.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob: Date | null;
        /**
        * **people.people.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **people.people.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **people.people.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt: string | null;
        /**
        * **people.people.full_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        full_name: string;
        /**
        * **people.people.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **people.people.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt: string | null;
        /**
        * **people.people.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.people_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.people.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.people.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng: c.PgGeometry | null;
        /**
        * **people.people.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **people.people.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization: string | null;
        /**
        * **people.people.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **people.people.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id: number | null;
        /**
        * **people.people.position**
        * - `text` in database
        * - Nullable, no default
        */
        position: string | null;
        /**
        * **people.people.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **people.people.preferred_language**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        preferred_language: string;
        /**
        * **people.people.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name: string | null;
        /**
        * **people.people.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **people.people.unique_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        unique_id: string;
        /**
        * **people.people.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **people.people.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp: c.PgWhatsapp | null;
      }
      export interface JSONSelectable {
        /**
        * **people.people.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **people.people.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **people.people.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3: string | null;
        /**
        * **people.people.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4: string | null;
        /**
        * **people.people.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country: string;
        /**
        * **people.people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.people.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **people.people.details**
        * - `text` in database
        * - Nullable, no default
        */
        details: string | null;
        /**
        * **people.people.do_not_contact**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        do_not_contact: boolean | null;
        /**
        * **people.people.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob: db.TimestampTzString | null;
        /**
        * **people.people.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **people.people.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **people.people.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt: string | null;
        /**
        * **people.people.full_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        full_name: string;
        /**
        * **people.people.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **people.people.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt: string | null;
        /**
        * **people.people.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.people_id_seq'::regclass)`
        */
        id: number;
        /**
        * **people.people.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **people.people.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng: c.PgGeometry | null;
        /**
        * **people.people.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **people.people.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization: string | null;
        /**
        * **people.people.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **people.people.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id: number | null;
        /**
        * **people.people.position**
        * - `text` in database
        * - Nullable, no default
        */
        position: string | null;
        /**
        * **people.people.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **people.people.preferred_language**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        preferred_language: string;
        /**
        * **people.people.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name: string | null;
        /**
        * **people.people.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **people.people.unique_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        unique_id: string;
        /**
        * **people.people.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **people.people.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp: c.PgWhatsapp | null;
      }
      export interface Whereable {
        /**
        * **people.people.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.details**
        * - `text` in database
        * - Nullable, no default
        */
        details?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.do_not_contact**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        do_not_contact?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.full_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        full_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.people_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.position**
        * - `text` in database
        * - Nullable, no default
        */
        position?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.preferred_language**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        preferred_language?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.unique_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        unique_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp?: c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.people.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.details**
        * - `text` in database
        * - Nullable, no default
        */
        details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.do_not_contact**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        do_not_contact?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.full_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        full_name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.people.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.people_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.people.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.position**
        * - `text` in database
        * - Nullable, no default
        */
        position?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.preferred_language**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        preferred_language: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **people.people.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.unique_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        unique_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.people.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp?: c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.people.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.people.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.details**
        * - `text` in database
        * - Nullable, no default
        */
        details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.do_not_contact**
        * - `bool` in database
        * - Nullable, default: `false`
        */
        do_not_contact?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgEmail | db.Parameter<c.PgEmail> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.full_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        full_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.people.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('people.people_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.people.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgPhone_number | db.Parameter<c.PgPhone_number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.position**
        * - `text` in database
        * - Nullable, no default
        */
        position?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.preferred_language**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        preferred_language?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **people.people.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.unique_id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        unique_id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp?: c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'people_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.people_search**
     * - View in database
     */
    export namespace people_search {
      export type Table = 'people.people_search';
      export interface Selectable {
        /**
        * **people.people_search.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **people.people_search.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **people.people_search.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3: string | null;
        /**
        * **people.people_search.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4: string | null;
        /**
        * **people.people_search.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country: string | null;
        /**
        * **people.people_search.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: Date | null;
        /**
        * **people.people_search.details**
        * - `text` in database
        * - Nullable, no default
        */
        details: string | null;
        /**
        * **people.people_search.do_not_contact**
        * - `bool` in database
        * - Nullable, no default
        */
        do_not_contact: boolean | null;
        /**
        * **people.people_search.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob: Date | null;
        /**
        * **people.people_search.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **people.people_search.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **people.people_search.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt: string | null;
        /**
        * **people.people_search.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name: string | null;
        /**
        * **people.people_search.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **people.people_search.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt: string | null;
        /**
        * **people.people_search.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id: number | null;
        /**
        * **people.people_search.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id: number | null;
        /**
        * **people.people_search.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng: c.PgGeometry | null;
        /**
        * **people.people_search.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **people.people_search.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization: string | null;
        /**
        * **people.people_search.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **people.people_search.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id: number | null;
        /**
        * **people.people_search.position**
        * - `text` in database
        * - Nullable, no default
        */
        position: string | null;
        /**
        * **people.people_search.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **people.people_search.preferred_language**
        * - `varchar` in database
        * - Nullable, no default
        */
        preferred_language: string | null;
        /**
        * **people.people_search.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name: string | null;
        /**
        * **people.people_search.search**
        * - `text` in database
        * - Nullable, no default
        */
        search: string | null;
        /**
        * **people.people_search.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **people.people_search.unique_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        unique_id: string | null;
        /**
        * **people.people_search.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: Date | null;
        /**
        * **people.people_search.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp: c.PgWhatsapp | null;
      }
      export interface JSONSelectable {
        /**
        * **people.people_search.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **people.people_search.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **people.people_search.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3: string | null;
        /**
        * **people.people_search.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4: string | null;
        /**
        * **people.people_search.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country: string | null;
        /**
        * **people.people_search.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: db.TimestampTzString | null;
        /**
        * **people.people_search.details**
        * - `text` in database
        * - Nullable, no default
        */
        details: string | null;
        /**
        * **people.people_search.do_not_contact**
        * - `bool` in database
        * - Nullable, no default
        */
        do_not_contact: boolean | null;
        /**
        * **people.people_search.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob: db.TimestampTzString | null;
        /**
        * **people.people_search.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **people.people_search.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **people.people_search.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt: string | null;
        /**
        * **people.people_search.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name: string | null;
        /**
        * **people.people_search.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **people.people_search.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt: string | null;
        /**
        * **people.people_search.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id: number | null;
        /**
        * **people.people_search.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id: number | null;
        /**
        * **people.people_search.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng: c.PgGeometry | null;
        /**
        * **people.people_search.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **people.people_search.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization: string | null;
        /**
        * **people.people_search.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **people.people_search.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id: number | null;
        /**
        * **people.people_search.position**
        * - `text` in database
        * - Nullable, no default
        */
        position: string | null;
        /**
        * **people.people_search.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **people.people_search.preferred_language**
        * - `varchar` in database
        * - Nullable, no default
        */
        preferred_language: string | null;
        /**
        * **people.people_search.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name: string | null;
        /**
        * **people.people_search.search**
        * - `text` in database
        * - Nullable, no default
        */
        search: string | null;
        /**
        * **people.people_search.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **people.people_search.unique_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        unique_id: string | null;
        /**
        * **people.people_search.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: db.TimestampTzString | null;
        /**
        * **people.people_search.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp: c.PgWhatsapp | null;
      }
      export interface Whereable {
        /**
        * **people.people_search.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.details**
        * - `text` in database
        * - Nullable, no default
        */
        details?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.do_not_contact**
        * - `bool` in database
        * - Nullable, no default
        */
        do_not_contact?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.position**
        * - `text` in database
        * - Nullable, no default
        */
        position?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.preferred_language**
        * - `varchar` in database
        * - Nullable, no default
        */
        preferred_language?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.search**
        * - `text` in database
        * - Nullable, no default
        */
        search?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.unique_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        unique_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.people_search.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp?: c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.people_search.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.details**
        * - `text` in database
        * - Nullable, no default
        */
        details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.do_not_contact**
        * - `bool` in database
        * - Nullable, no default
        */
        do_not_contact?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.position**
        * - `text` in database
        * - Nullable, no default
        */
        position?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.preferred_language**
        * - `varchar` in database
        * - Nullable, no default
        */
        preferred_language?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.search**
        * - `text` in database
        * - Nullable, no default
        */
        search?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.unique_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        unique_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **people.people_search.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp?: c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.people_search.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.details**
        * - `text` in database
        * - Nullable, no default
        */
        details?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.do_not_contact**
        * - `bool` in database
        * - Nullable, no default
        */
        do_not_contact?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.dob**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        dob?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgEmail | db.Parameter<c.PgEmail> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.family_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        family_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.given_name_alt**
        * - `text` in database
        * - Nullable, no default
        */
        given_name_alt?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.id**
        * - `int4` in database
        * - Nullable, no default
        */
        id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.instance_id**
        * - `int4` in database
        * - Nullable, no default
        */
        instance_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.organization**
        * - `text` in database
        * - Nullable, no default
        */
        organization?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgPhone_number | db.Parameter<c.PgPhone_number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.point_person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        point_person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.position**
        * - `text` in database
        * - Nullable, no default
        */
        position?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.preferred_language**
        * - `varchar` in database
        * - Nullable, no default
        */
        preferred_language?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.preferred_name**
        * - `text` in database
        * - Nullable, no default
        */
        preferred_name?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.search**
        * - `text` in database
        * - Nullable, no default
        */
        search?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.unique_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        unique_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **people.people_search.whatsapp**
        * - `whatsapp` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        whatsapp?: c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgWhatsapp | db.Parameter<c.PgWhatsapp> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = never;
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **people.taggings**
     * - Table in database
     */
    export namespace taggings {
      export type Table = 'people.taggings';
      export interface Selectable {
        /**
        * **people.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **people.taggings.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **people.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface JSONSelectable {
        /**
        * **people.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **people.taggings.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **people.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface Whereable {
        /**
        * **people.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.taggings.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **people.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **people.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **people.taggings.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **people.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **people.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **people.taggings.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **people.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'taggings_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = custom_field_values.Table | custom_fields.Table | group_members.Table | groups.Table | imports.Table | interactions.Table | list_interactions.Table | list_people.Table | list_view.Table | lists.Table | people.Table | people_search.Table | taggings.Table;
    export type Selectable = custom_field_values.Selectable | custom_fields.Selectable | group_members.Selectable | groups.Selectable | imports.Selectable | interactions.Selectable | list_interactions.Selectable | list_people.Selectable | list_view.Selectable | lists.Selectable | people.Selectable | people_search.Selectable | taggings.Selectable;
    export type JSONSelectable = custom_field_values.JSONSelectable | custom_fields.JSONSelectable | group_members.JSONSelectable | groups.JSONSelectable | imports.JSONSelectable | interactions.JSONSelectable | list_interactions.JSONSelectable | list_people.JSONSelectable | list_view.JSONSelectable | lists.JSONSelectable | people.JSONSelectable | people_search.JSONSelectable | taggings.JSONSelectable;
    export type Whereable = custom_field_values.Whereable | custom_fields.Whereable | group_members.Whereable | groups.Whereable | imports.Whereable | interactions.Whereable | list_interactions.Whereable | list_people.Whereable | list_view.Whereable | lists.Whereable | people.Whereable | people_search.Whereable | taggings.Whereable;
    export type Insertable = custom_field_values.Insertable | custom_fields.Insertable | group_members.Insertable | groups.Insertable | imports.Insertable | interactions.Insertable | list_interactions.Insertable | list_people.Insertable | list_view.Insertable | lists.Insertable | people.Insertable | people_search.Insertable | taggings.Insertable;
    export type Updatable = custom_field_values.Updatable | custom_fields.Updatable | group_members.Updatable | groups.Updatable | imports.Updatable | interactions.Updatable | list_interactions.Updatable | list_people.Updatable | list_view.Updatable | lists.Updatable | people.Updatable | people_search.Updatable | taggings.Updatable;
    export type UniqueIndex = custom_field_values.UniqueIndex | custom_fields.UniqueIndex | group_members.UniqueIndex | groups.UniqueIndex | imports.UniqueIndex | interactions.UniqueIndex | list_interactions.UniqueIndex | list_people.UniqueIndex | list_view.UniqueIndex | lists.UniqueIndex | people.UniqueIndex | people_search.UniqueIndex | taggings.UniqueIndex;
    export type Column = custom_field_values.Column | custom_fields.Column | group_members.Column | groups.Column | imports.Column | interactions.Column | list_interactions.Column | list_people.Column | list_view.Column | lists.Column | people.Column | people_search.Column | taggings.Column;
  
    export type AllBaseTables = [custom_field_values.Table, custom_fields.Table, group_members.Table, groups.Table, imports.Table, interactions.Table, list_people.Table, lists.Table, people.Table, taggings.Table];
    export type AllForeignTables = [];
    export type AllViews = [list_interactions.Table, list_view.Table, people_search.Table];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [custom_field_values.Table, custom_fields.Table, group_members.Table, groups.Table, imports.Table, interactions.Table, list_interactions.Table, list_people.Table, list_view.Table, lists.Table, people.Table, people_search.Table, taggings.Table];
  }


  /* === schema: website === */

  export namespace website {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **website.blocks**
     * - Table in database
     */
    export namespace blocks {
      export type Table = 'website.blocks';
      export interface Selectable {
        /**
        * **website.blocks.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **website.blocks.custom_css**
        * - `text` in database
        * - Nullable, no default
        */
        custom_css: string | null;
        /**
        * **website.blocks.custom_js**
        * - `text` in database
        * - Nullable, no default
        */
        custom_js: string | null;
        /**
        * **website.blocks.description**
        * - `text` in database
        * - Nullable, no default
        */
        description: string | null;
        /**
        * **website.blocks.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **website.blocks.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.blocks_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.blocks.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.blocks.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **website.blocks.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **website.blocks.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **website.blocks.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **website.blocks.custom_css**
        * - `text` in database
        * - Nullable, no default
        */
        custom_css: string | null;
        /**
        * **website.blocks.custom_js**
        * - `text` in database
        * - Nullable, no default
        */
        custom_js: string | null;
        /**
        * **website.blocks.description**
        * - `text` in database
        * - Nullable, no default
        */
        description: string | null;
        /**
        * **website.blocks.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **website.blocks.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.blocks_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.blocks.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.blocks.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **website.blocks.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **website.blocks.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **website.blocks.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.custom_css**
        * - `text` in database
        * - Nullable, no default
        */
        custom_css?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.custom_js**
        * - `text` in database
        * - Nullable, no default
        */
        custom_js?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.blocks_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.blocks.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **website.blocks.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **website.blocks.custom_css**
        * - `text` in database
        * - Nullable, no default
        */
        custom_css?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **website.blocks.custom_js**
        * - `text` in database
        * - Nullable, no default
        */
        custom_js?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **website.blocks.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **website.blocks.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **website.blocks.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.blocks_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **website.blocks.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **website.blocks.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.blocks.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.blocks.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **website.blocks.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.blocks.custom_css**
        * - `text` in database
        * - Nullable, no default
        */
        custom_css?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **website.blocks.custom_js**
        * - `text` in database
        * - Nullable, no default
        */
        custom_js?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **website.blocks.description**
        * - `text` in database
        * - Nullable, no default
        */
        description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **website.blocks.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.blocks.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.blocks_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.blocks.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **website.blocks.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.blocks.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.blocks.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'blocks_instance_id_name_unique' | 'blocks_instance_id_slug_unique' | 'blocks_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **website.content**
     * - Table in database
     */
    export namespace content {
      export type Table = 'website.content';
      export interface Selectable {
        /**
        * **website.content.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **website.content.content_type_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_type_id: number;
        /**
        * **website.content.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **website.content.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        custom_code: c.PgCustom_code;
        /**
        * **website.content.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **website.content.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id: number | null;
        /**
        * **website.content.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string;
        /**
        * **website.content.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **website.content.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        html_metatags: c.PgHtml_metatags;
        /**
        * **website.content.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.content.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **website.content.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at: Date | null;
        /**
        * **website.content.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **website.content.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **website.content.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **website.content.content_type_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_type_id: number;
        /**
        * **website.content.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **website.content.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        custom_code: c.PgCustom_code;
        /**
        * **website.content.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **website.content.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id: number | null;
        /**
        * **website.content.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string;
        /**
        * **website.content.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **website.content.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        html_metatags: c.PgHtml_metatags;
        /**
        * **website.content.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.content.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **website.content.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at: db.TimestampTzString | null;
        /**
        * **website.content.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **website.content.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **website.content.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.content_type_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_type_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **website.content.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.content_type_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_type_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **website.content.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.content.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.content.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **website.content.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.content.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **website.content.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.content_type_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_type_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **website.content.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.content.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.content.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.content.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'content_content_type_id_name_unique' | 'content_content_type_id_slug_unique' | 'content_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **website.content_types**
     * - Table in database
     */
    export namespace content_types {
      export type Table = 'website.content_types';
      export interface Selectable {
        /**
        * **website.content_types.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **website.content_types.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **website.content_types.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_types_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.content_types.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.content_types.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **website.content_types.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **website.content_types.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **website.content_types.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **website.content_types.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **website.content_types.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_types_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.content_types.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.content_types.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **website.content_types.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **website.content_types.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **website.content_types.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content_types.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content_types.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_types_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content_types.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content_types.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content_types.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.content_types.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **website.content_types.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content_types.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content_types.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_types_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **website.content_types.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **website.content_types.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.content_types.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.content_types.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **website.content_types.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content_types.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content_types.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.content_types_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.content_types.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **website.content_types.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.content_types.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.content_types.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'content_types_instance_id_name_unique' | 'content_types_instance_id_slug_unique' | 'content_types_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **website.redirects**
     * - Table in database
     */
    export namespace redirects {
      export type Table = 'website.redirects';
      export interface Selectable {
        /**
        * **website.redirects.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **website.redirects.canonical**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        canonical: boolean;
        /**
        * **website.redirects.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **website.redirects.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string;
        /**
        * **website.redirects.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.redirects_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.redirects.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.redirects.to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        to: string;
        /**
        * **website.redirects.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **website.redirects.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **website.redirects.canonical**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        canonical: boolean;
        /**
        * **website.redirects.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **website.redirects.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string;
        /**
        * **website.redirects.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.redirects_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.redirects.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.redirects.to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        to: string;
        /**
        * **website.redirects.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **website.redirects.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.redirects.canonical**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        canonical?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.redirects.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.redirects.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.redirects.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.redirects_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.redirects.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.redirects.to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.redirects.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **website.redirects.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **website.redirects.canonical**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        canonical?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **website.redirects.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **website.redirects.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.redirects.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.redirects_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **website.redirects.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **website.redirects.to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        to: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.redirects.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **website.redirects.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.redirects.canonical**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        canonical?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.redirects.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.redirects.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.redirects.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.redirects_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.redirects.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **website.redirects.to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        to?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.redirects.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'redirects_instance_id_from_unique' | 'redirects_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **website.taggings**
     * - Table in database
     */
    export namespace taggings {
      export type Table = 'website.taggings';
      export interface Selectable {
        /**
        * **website.taggings.content_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_id: number;
        /**
        * **website.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **website.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface JSONSelectable {
        /**
        * **website.taggings.content_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_id: number;
        /**
        * **website.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **website.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface Whereable {
        /**
        * **website.taggings.content_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **website.taggings.content_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **website.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **website.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **website.taggings.content_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        content_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **website.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'taggings_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **website.uploads**
     * - Table in database
     */
    export namespace uploads {
      export type Table = 'website.uploads';
      export interface Selectable {
        /**
        * **website.uploads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **website.uploads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **website.uploads.file_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        file_name: string;
        /**
        * **website.uploads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.uploads_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.uploads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.uploads.mime_type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        mime_type: string;
        /**
        * **website.uploads.size**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        size: number;
        /**
        * **website.uploads.url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        url: string;
      }
      export interface JSONSelectable {
        /**
        * **website.uploads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **website.uploads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **website.uploads.file_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        file_name: string;
        /**
        * **website.uploads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.uploads_id_seq'::regclass)`
        */
        id: number;
        /**
        * **website.uploads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **website.uploads.mime_type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        mime_type: string;
        /**
        * **website.uploads.size**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        size: number;
        /**
        * **website.uploads.url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        url: string;
      }
      export interface Whereable {
        /**
        * **website.uploads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.uploads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.uploads.file_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        file_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.uploads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.uploads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.uploads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.uploads.mime_type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        mime_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.uploads.size**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        size?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **website.uploads.url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **website.uploads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **website.uploads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **website.uploads.file_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        file_name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.uploads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.uploads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **website.uploads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **website.uploads.mime_type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        mime_type: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **website.uploads.size**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        size: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **website.uploads.url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        url: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **website.uploads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.uploads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **website.uploads.file_name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        file_name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.uploads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('website.uploads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **website.uploads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **website.uploads.mime_type**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        mime_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **website.uploads.size**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        size?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **website.uploads.url**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        url?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'uploads_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = blocks.Table | content.Table | content_types.Table | redirects.Table | taggings.Table | uploads.Table;
    export type Selectable = blocks.Selectable | content.Selectable | content_types.Selectable | redirects.Selectable | taggings.Selectable | uploads.Selectable;
    export type JSONSelectable = blocks.JSONSelectable | content.JSONSelectable | content_types.JSONSelectable | redirects.JSONSelectable | taggings.JSONSelectable | uploads.JSONSelectable;
    export type Whereable = blocks.Whereable | content.Whereable | content_types.Whereable | redirects.Whereable | taggings.Whereable | uploads.Whereable;
    export type Insertable = blocks.Insertable | content.Insertable | content_types.Insertable | redirects.Insertable | taggings.Insertable | uploads.Insertable;
    export type Updatable = blocks.Updatable | content.Updatable | content_types.Updatable | redirects.Updatable | taggings.Updatable | uploads.Updatable;
    export type UniqueIndex = blocks.UniqueIndex | content.UniqueIndex | content_types.UniqueIndex | redirects.UniqueIndex | taggings.UniqueIndex | uploads.UniqueIndex;
    export type Column = blocks.Column | content.Column | content_types.Column | redirects.Column | taggings.Column | uploads.Column;
  
    export type AllBaseTables = [blocks.Table, content.Table, content_types.Table, redirects.Table, taggings.Table, uploads.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [blocks.Table, content.Table, content_types.Table, redirects.Table, taggings.Table, uploads.Table];
  }


  /* === schema: communications === */

  export namespace communications {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **communications.email_messages**
     * - Table in database
     */
    export namespace email_messages {
      export type Table = 'communications.email_messages';
      export interface Selectable {
        /**
        * **communications.email_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.email_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **communications.email_messages.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string;
        /**
        * **communications.email_messages.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **communications.email_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_messages_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.email_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.email_messages.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.email_messages.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **communications.email_messages.preview_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        preview_text: string;
        /**
        * **communications.email_messages.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to: string;
        /**
        * **communications.email_messages.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string;
        /**
        * **communications.email_messages.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id: number;
        /**
        * **communications.email_messages.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text: string;
        /**
        * **communications.email_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **communications.email_messages.use_html_for_plaintext**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        use_html_for_plaintext: boolean;
      }
      export interface JSONSelectable {
        /**
        * **communications.email_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.email_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **communications.email_messages.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string;
        /**
        * **communications.email_messages.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **communications.email_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_messages_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.email_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.email_messages.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.email_messages.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **communications.email_messages.preview_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        preview_text: string;
        /**
        * **communications.email_messages.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to: string;
        /**
        * **communications.email_messages.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string;
        /**
        * **communications.email_messages.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id: number;
        /**
        * **communications.email_messages.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text: string;
        /**
        * **communications.email_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **communications.email_messages.use_html_for_plaintext**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        use_html_for_plaintext: boolean;
      }
      export interface Whereable {
        /**
        * **communications.email_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_messages_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.preview_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        preview_text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_messages.use_html_for_plaintext**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        use_html_for_plaintext?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.email_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_messages.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_messages.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_messages_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.email_messages.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_messages.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.email_messages.preview_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        preview_text: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_messages.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_messages.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_messages.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.email_messages.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_messages.use_html_for_plaintext**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        use_html_for_plaintext?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.email_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_messages.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_messages.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_messages_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.email_messages.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_messages.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.email_messages.preview_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        preview_text?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_messages.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_messages.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_messages.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.email_messages.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_messages.use_html_for_plaintext**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        use_html_for_plaintext?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'email_messages_instance_id_name_unique' | 'email_messages_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.email_sends**
     * - Table in database
     */
    export namespace email_sends {
      export type Table = 'communications.email_sends';
      export interface Selectable {
        /**
        * **communications.email_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at: Date | null;
        /**
        * **communications.email_sends.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.email_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_sends_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.email_sends.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.email_sends.list_id**
        * - `int4` in database
        * - Nullable, no default
        */
        list_id: number | null;
        /**
        * **communications.email_sends.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number;
        /**
        * **communications.email_sends.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.email_sends.sent_by_id**
        * - `int4` in database
        * - Nullable, no default
        */
        sent_by_id: number | null;
        /**
        * **communications.email_sends.started_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        started_at: Date | null;
        /**
        * **communications.email_sends.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.email_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at: db.TimestampTzString | null;
        /**
        * **communications.email_sends.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.email_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_sends_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.email_sends.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.email_sends.list_id**
        * - `int4` in database
        * - Nullable, no default
        */
        list_id: number | null;
        /**
        * **communications.email_sends.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number;
        /**
        * **communications.email_sends.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.email_sends.sent_by_id**
        * - `int4` in database
        * - Nullable, no default
        */
        sent_by_id: number | null;
        /**
        * **communications.email_sends.started_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        started_at: db.TimestampTzString | null;
        /**
        * **communications.email_sends.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.email_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.list_id**
        * - `int4` in database
        * - Nullable, no default
        */
        list_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.sent_by_id**
        * - `int4` in database
        * - Nullable, no default
        */
        sent_by_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.started_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_sends.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.email_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_sends.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_sends.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.email_sends.list_id**
        * - `int4` in database
        * - Nullable, no default
        */
        list_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_sends.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.email_sends.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_sends.sent_by_id**
        * - `int4` in database
        * - Nullable, no default
        */
        sent_by_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_sends.started_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_sends.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.email_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_sends.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_sends.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.email_sends.list_id**
        * - `int4` in database
        * - Nullable, no default
        */
        list_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_sends.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.email_sends.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_sends.sent_by_id**
        * - `int4` in database
        * - Nullable, no default
        */
        sent_by_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_sends.started_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_sends.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'email_sends_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.email_templates**
     * - Table in database
     */
    export namespace email_templates {
      export type Table = 'communications.email_templates';
      export interface Selectable {
        /**
        * **communications.email_templates.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **communications.email_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.email_templates.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string;
        /**
        * **communications.email_templates.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **communications.email_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_templates_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.email_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.email_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.email_templates.preview_text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        preview_text: string;
        /**
        * **communications.email_templates.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to: string;
        /**
        * **communications.email_templates.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string;
        /**
        * **communications.email_templates.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text: string;
        /**
        * **communications.email_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.email_templates.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **communications.email_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.email_templates.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string;
        /**
        * **communications.email_templates.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **communications.email_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_templates_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.email_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.email_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.email_templates.preview_text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        preview_text: string;
        /**
        * **communications.email_templates.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to: string;
        /**
        * **communications.email_templates.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string;
        /**
        * **communications.email_templates.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text: string;
        /**
        * **communications.email_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.email_templates.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_templates_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.preview_text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        preview_text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.email_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.email_templates.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_templates.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_templates.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_templates_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.email_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_templates.preview_text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        preview_text?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_templates.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_templates.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.email_templates.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.email_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.email_templates.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_templates.from**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        from?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_templates.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.email_templates_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.email_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_templates.preview_text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        preview_text?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_templates.reply_to**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        reply_to?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_templates.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.email_templates.text**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        text?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.email_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'email_templates_instance_id_name_unique' | 'email_templates_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.received_emails**
     * - Table in database
     */
    export namespace received_emails {
      export type Table = 'communications.received_emails';
      export interface Selectable {
        /**
        * **communications.received_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.received_emails.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string;
        /**
        * **communications.received_emails.message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        message_id: number | null;
        /**
        * **communications.received_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.received_emails.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at: Date;
        /**
        * **communications.received_emails.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string;
      }
      export interface JSONSelectable {
        /**
        * **communications.received_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.received_emails.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string;
        /**
        * **communications.received_emails.message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        message_id: number | null;
        /**
        * **communications.received_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.received_emails.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at: db.TimestampTzString;
        /**
        * **communications.received_emails.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string;
      }
      export interface Whereable {
        /**
        * **communications.received_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_emails.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_emails.message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        message_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_emails.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_emails.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.received_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_emails.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.received_emails.message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        message_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.received_emails.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_emails.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.received_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_emails.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.received_emails.message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        message_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.received_emails.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_emails.subject**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'received_emails_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.received_sms**
     * - Table in database
     */
    export namespace received_sms {
      export type Table = 'communications.received_sms';
      export interface Selectable {
        /**
        * **communications.received_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.received_sms_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.received_sms.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string;
        /**
        * **communications.received_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.received_sms.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.received_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.received_sms_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.received_sms.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string;
        /**
        * **communications.received_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.received_sms.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.received_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.received_sms_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_sms.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_sms.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.received_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.received_sms_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_sms.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.received_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.received_sms.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.received_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.received_sms_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_sms.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.received_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.received_sms.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'received_sms_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.received_whatsapp_group_messages**
     * - Table in database
     */
    export namespace received_whatsapp_group_messages {
      export type Table = 'communications.received_whatsapp_group_messages';
      export interface Selectable {
        /**
        * **communications.received_whatsapp_group_messages.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id: number;
        /**
        * **communications.received_whatsapp_group_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.received_whatsapp_group_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.received_whatsapp_group_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgIncoming_whatsapp_message;
        /**
        * **communications.received_whatsapp_group_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.received_whatsapp_group_messages.platform**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        platform: string;
        /**
        * **communications.received_whatsapp_group_messages.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.received_whatsapp_group_messages.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id: number;
        /**
        * **communications.received_whatsapp_group_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.received_whatsapp_group_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.received_whatsapp_group_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgIncoming_whatsapp_message;
        /**
        * **communications.received_whatsapp_group_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.received_whatsapp_group_messages.platform**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        platform: string;
        /**
        * **communications.received_whatsapp_group_messages.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.received_whatsapp_group_messages.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_group_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_group_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_group_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_group_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_group_messages.platform**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        platform?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_group_messages.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.received_whatsapp_group_messages.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.received_whatsapp_group_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_group_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.received_whatsapp_group_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment;
        /**
        * **communications.received_whatsapp_group_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.received_whatsapp_group_messages.platform**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        platform: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.received_whatsapp_group_messages.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.received_whatsapp_group_messages.group_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        group_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_group_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_group_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_group_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment | db.SQLFragment<any, c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_group_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_group_messages.platform**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        platform?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_group_messages.received_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        received_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'received_whatsapp_group_messages_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.received_whatsapp_messages**
     * - Table in database
     */
    export namespace received_whatsapp_messages {
      export type Table = 'communications.received_whatsapp_messages';
      export interface Selectable {
        /**
        * **communications.received_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id: number | null;
        /**
        * **communications.received_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.received_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.received_whatsapp_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgIncoming_whatsapp_message;
        /**
        * **communications.received_whatsapp_messages.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **communications.received_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted: boolean;
        /**
        * **communications.received_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji: string | null;
        /**
        * **communications.received_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **communications.received_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid: string | null;
      }
      export interface JSONSelectable {
        /**
        * **communications.received_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id: number | null;
        /**
        * **communications.received_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.received_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.received_whatsapp_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgIncoming_whatsapp_message;
        /**
        * **communications.received_whatsapp_messages.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **communications.received_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted: boolean;
        /**
        * **communications.received_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji: string | null;
        /**
        * **communications.received_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **communications.received_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid: string | null;
      }
      export interface Whereable {
        /**
        * **communications.received_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.received_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.received_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.received_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.received_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.message**
        * - `incoming_whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment | db.SQLFragment<any, c.PgIncoming_whatsapp_message | db.Parameter<c.PgIncoming_whatsapp_message> | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.received_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'received_whatsapp_messages_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.sent_emails**
     * - Table in database
     */
    export namespace sent_emails {
      export type Table = 'communications.sent_emails';
      export interface Selectable {
        /**
        * **communications.sent_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.sent_emails.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number;
        /**
        * **communications.sent_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.sent_emails.send_id**
        * - `int4` in database
        * - Nullable, no default
        */
        send_id: number | null;
        /**
        * **communications.sent_emails.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.sent_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.sent_emails.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number;
        /**
        * **communications.sent_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.sent_emails.send_id**
        * - `int4` in database
        * - Nullable, no default
        */
        send_id: number | null;
        /**
        * **communications.sent_emails.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.sent_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_emails.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_emails.send_id**
        * - `int4` in database
        * - Nullable, no default
        */
        send_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_emails.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.sent_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_emails.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sent_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sent_emails.send_id**
        * - `int4` in database
        * - Nullable, no default
        */
        send_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_emails.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.sent_emails.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_emails.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sent_emails.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sent_emails.send_id**
        * - `int4` in database
        * - Nullable, no default
        */
        send_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_emails.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'sent_emails_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.sent_sms**
     * - Table in database
     */
    export namespace sent_sms {
      export type Table = 'communications.sent_sms';
      export interface Selectable {
        /**
        * **communications.sent_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sent_sms_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sent_sms.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number;
        /**
        * **communications.sent_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.sent_sms.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.sent_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sent_sms_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sent_sms.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number;
        /**
        * **communications.sent_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.sent_sms.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.sent_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sent_sms_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_sms.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_sms.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.sent_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sent_sms_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_sms.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sent_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sent_sms.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.sent_sms.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sent_sms_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_sms.message_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        message_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sent_sms.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sent_sms.sent_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'sent_sms_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.sent_whatsapp_messages**
     * - Table in database
     */
    export namespace sent_whatsapp_messages {
      export type Table = 'communications.sent_whatsapp_messages';
      export interface Selectable {
        /**
        * **communications.sent_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id: number | null;
        /**
        * **communications.sent_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.sent_whatsapp_messages.delivered**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        delivered: boolean;
        /**
        * **communications.sent_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.sent_whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_message;
        /**
        * **communications.sent_whatsapp_messages.message_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        message_id: string | null;
        /**
        * **communications.sent_whatsapp_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.sent_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted: boolean;
        /**
        * **communications.sent_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji: string | null;
        /**
        * **communications.sent_whatsapp_messages.read**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        read: boolean;
        /**
        * **communications.sent_whatsapp_messages.stale**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        stale: boolean;
        /**
        * **communications.sent_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **communications.sent_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid: string | null;
      }
      export interface JSONSelectable {
        /**
        * **communications.sent_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id: number | null;
        /**
        * **communications.sent_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.sent_whatsapp_messages.delivered**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        delivered: boolean;
        /**
        * **communications.sent_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.sent_whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_message;
        /**
        * **communications.sent_whatsapp_messages.message_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        message_id: string | null;
        /**
        * **communications.sent_whatsapp_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.sent_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted: boolean;
        /**
        * **communications.sent_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji: string | null;
        /**
        * **communications.sent_whatsapp_messages.read**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        read: boolean;
        /**
        * **communications.sent_whatsapp_messages.stale**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        stale: boolean;
        /**
        * **communications.sent_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **communications.sent_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid: string | null;
      }
      export interface Whereable {
        /**
        * **communications.sent_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.delivered**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        delivered?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.message_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        message_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.read**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        read?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.stale**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        stale?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sent_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.sent_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.delivered**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        delivered?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.message_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        message_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.read**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        read?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.stale**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        stale?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sent_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.sent_whatsapp_messages.conversation_id**
        * - `int4` in database
        * - Nullable, no default
        */
        conversation_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.delivered**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        delivered?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment | db.SQLFragment<any, c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.message_id**
        * - `uuid` in database
        * - Nullable, no default
        */
        message_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.reacted**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        reacted?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.reacted_emoji**
        * - `varchar` in database
        * - Nullable, no default
        */
        reacted_emoji?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.read**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        read?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.stale**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        stale?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sent_whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'sent_whatsapp_messages_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.sms_messages**
     * - Table in database
     */
    export namespace sms_messages {
      export type Table = 'communications.sms_messages';
      export interface Selectable {
        /**
        * **communications.sms_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions: c.PgCommunication_actions;
        /**
        * **communications.sms_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.sms_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_messages_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.sms_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords: c.PgKeyword_triggers;
        /**
        * **communications.sms_messages.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string;
        /**
        * **communications.sms_messages.next**
        * - `int4` in database
        * - Nullable, no default
        */
        next: number | null;
        /**
        * **communications.sms_messages.sms_number_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sms_number_id: number;
        /**
        * **communications.sms_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.sms_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions: c.PgCommunication_actions;
        /**
        * **communications.sms_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.sms_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_messages_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.sms_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords: c.PgKeyword_triggers;
        /**
        * **communications.sms_messages.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string;
        /**
        * **communications.sms_messages.next**
        * - `int4` in database
        * - Nullable, no default
        */
        next: number | null;
        /**
        * **communications.sms_messages.sms_number_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sms_number_id: number;
        /**
        * **communications.sms_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.sms_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_messages_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords?: c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.next**
        * - `int4` in database
        * - Nullable, no default
        */
        next?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.sms_number_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sms_number_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.sms_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_messages_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sms_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords?: c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_messages.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.sms_messages.next**
        * - `int4` in database
        * - Nullable, no default
        */
        next?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_messages.sms_number_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sms_number_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sms_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.sms_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_messages.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_messages_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sms_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords?: c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_messages.message**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        message?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.sms_messages.next**
        * - `int4` in database
        * - Nullable, no default
        */
        next?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_messages.sms_number_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sms_number_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sms_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'sms_messages_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.sms_numbers**
     * - Table in database
     */
    export namespace sms_numbers {
      export type Table = 'communications.sms_numbers';
      export interface Selectable {
        /**
        * **communications.sms_numbers.active**
        * - `bool` in database
        * - Nullable, no default
        */
        active: boolean | null;
        /**
        * **communications.sms_numbers.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_numbers_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.sms_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number: string;
      }
      export interface JSONSelectable {
        /**
        * **communications.sms_numbers.active**
        * - `bool` in database
        * - Nullable, no default
        */
        active: boolean | null;
        /**
        * **communications.sms_numbers.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_numbers_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.sms_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number: string;
      }
      export interface Whereable {
        /**
        * **communications.sms_numbers.active**
        * - `bool` in database
        * - Nullable, no default
        */
        active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_numbers.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_numbers_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.sms_numbers.active**
        * - `bool` in database
        * - Nullable, no default
        */
        active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_numbers.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_numbers_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sms_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.sms_numbers.active**
        * - `bool` in database
        * - Nullable, no default
        */
        active?: boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_numbers.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_numbers_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sms_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'sms_numbers_instance_id_number_unique' | 'sms_numbers_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.sms_sends**
     * - Table in database
     */
    export namespace sms_sends {
      export type Table = 'communications.sms_sends';
      export interface Selectable {
        /**
        * **communications.sms_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at: Date | null;
        /**
        * **communications.sms_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_sends_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number;
        /**
        * **communications.sms_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id: number;
        /**
        * **communications.sms_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at: Date;
        /**
        * **communications.sms_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number;
      }
      export interface JSONSelectable {
        /**
        * **communications.sms_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at: db.TimestampTzString | null;
        /**
        * **communications.sms_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_sends_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number;
        /**
        * **communications.sms_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id: number;
        /**
        * **communications.sms_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at: db.TimestampTzString;
        /**
        * **communications.sms_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number;
      }
      export interface Whereable {
        /**
        * **communications.sms_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.sms_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sms_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sms_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.sms_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sms_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sms_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'sms_sends_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.sms_threads**
     * - Table in database
     */
    export namespace sms_threads {
      export type Table = 'communications.sms_threads';
      export interface Selectable {
        /**
        * **communications.sms_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.sms_threads.first_message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        first_message_id: number | null;
        /**
        * **communications.sms_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_threads_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.sms_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.sms_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.sms_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.sms_threads.first_message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        first_message_id: number | null;
        /**
        * **communications.sms_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_threads_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.sms_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.sms_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.sms_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.sms_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_threads.first_message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        first_message_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_threads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.sms_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.sms_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_threads.first_message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        first_message_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_threads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.sms_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.sms_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.sms_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.sms_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_threads.first_message_id**
        * - `int4` in database
        * - Nullable, no default
        */
        first_message_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.sms_threads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.sms_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.sms_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.sms_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'sms_threads_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.whatsapp_conversations**
     * - Table in database
     */
    export namespace whatsapp_conversations {
      export type Table = 'communications.whatsapp_conversations';
      export interface Selectable {
        /**
        * **communications.whatsapp_conversations.expired**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        expired: boolean;
        /**
        * **communications.whatsapp_conversations.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(now() + '24:00:00'::interval)`
        */
        expires_at: Date;
        /**
        * **communications.whatsapp_conversations.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_conversations_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_conversations.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.whatsapp_conversations.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at: Date;
        /**
        * **communications.whatsapp_conversations.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id: number | null;
        /**
        * **communications.whatsapp_conversations.type**
        * - `varchar` in database
        * - Nullable, no default
        */
        type: string | null;
        /**
        * **communications.whatsapp_conversations.whatsapp_id**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id: string;
      }
      export interface JSONSelectable {
        /**
        * **communications.whatsapp_conversations.expired**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        expired: boolean;
        /**
        * **communications.whatsapp_conversations.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(now() + '24:00:00'::interval)`
        */
        expires_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_conversations.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_conversations_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_conversations.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **communications.whatsapp_conversations.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_conversations.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id: number | null;
        /**
        * **communications.whatsapp_conversations.type**
        * - `varchar` in database
        * - Nullable, no default
        */
        type: string | null;
        /**
        * **communications.whatsapp_conversations.whatsapp_id**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id: string;
      }
      export interface Whereable {
        /**
        * **communications.whatsapp_conversations.expired**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        expired?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_conversations.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(now() + '24:00:00'::interval)`
        */
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_conversations.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_conversations_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_conversations.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_conversations.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_conversations.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_conversations.type**
        * - `varchar` in database
        * - Nullable, no default
        */
        type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_conversations.whatsapp_id**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.whatsapp_conversations.expired**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        expired?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_conversations.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(now() + '24:00:00'::interval)`
        */
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_conversations.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_conversations_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_conversations.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_conversations.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_conversations.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_conversations.type**
        * - `varchar` in database
        * - Nullable, no default
        */
        type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_conversations.whatsapp_id**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.whatsapp_conversations.expired**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        expired?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_conversations.expires_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `(now() + '24:00:00'::interval)`
        */
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_conversations.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_conversations_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_conversations.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_conversations.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_conversations.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_conversations.type**
        * - `varchar` in database
        * - Nullable, no default
        */
        type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_conversations.whatsapp_id**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'whatsapp_conversations_pkey' | 'whatsapp_conversations_whatsapp_id_unique';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.whatsapp_messages**
     * - Table in database
     */
    export namespace whatsapp_messages {
      export type Table = 'communications.whatsapp_messages';
      export interface Selectable {
        /**
        * **communications.whatsapp_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions: c.PgCommunication_actions;
        /**
        * **communications.whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.whatsapp_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **communications.whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.whatsapp_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords: c.PgKeyword_triggers;
        /**
        * **communications.whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_message;
        /**
        * **communications.whatsapp_messages.next**
        * - `uuid` in database
        * - Nullable, no default
        */
        next: string | null;
        /**
        * **communications.whatsapp_messages.on_read_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_read_action: string | null;
        /**
        * **communications.whatsapp_messages.on_sent_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_sent_action: string | null;
        /**
        * **communications.whatsapp_messages.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id: number | null;
        /**
        * **communications.whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **communications.whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid: string | null;
      }
      export interface JSONSelectable {
        /**
        * **communications.whatsapp_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions: c.PgCommunication_actions;
        /**
        * **communications.whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **communications.whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id: string;
        /**
        * **communications.whatsapp_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords: c.PgKeyword_triggers;
        /**
        * **communications.whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_message;
        /**
        * **communications.whatsapp_messages.next**
        * - `uuid` in database
        * - Nullable, no default
        */
        next: string | null;
        /**
        * **communications.whatsapp_messages.on_read_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_read_action: string | null;
        /**
        * **communications.whatsapp_messages.on_sent_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_sent_action: string | null;
        /**
        * **communications.whatsapp_messages.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id: number | null;
        /**
        * **communications.whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid: string | null;
      }
      export interface Whereable {
        /**
        * **communications.whatsapp_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords?: c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.next**
        * - `uuid` in database
        * - Nullable, no default
        */
        next?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.on_read_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_read_action?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.on_sent_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_sent_action?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.whatsapp_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords?: c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.next**
        * - `uuid` in database
        * - Nullable, no default
        */
        next?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.on_read_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_read_action?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.on_sent_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_sent_action?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.whatsapp_messages.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.id**
        * - `uuid` in database
        * - `NOT NULL`, default: `uuid_generate_v4()`
        */
        id?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.keywords**
        * - `keyword_triggers` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        keywords?: c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgKeyword_triggers | db.Parameter<c.PgKeyword_triggers> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.message**
        * - `whatsapp_message` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment | db.SQLFragment<any, c.PgWhatsapp_message | db.Parameter<c.PgWhatsapp_message> | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.next**
        * - `uuid` in database
        * - Nullable, no default
        */
        next?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.on_read_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_read_action?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.on_sent_action**
        * - `uuid` in database
        * - Nullable, no default
        */
        on_sent_action?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.thread_id**
        * - `int4` in database
        * - Nullable, no default
        */
        thread_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_messages.wamid**
        * - `text` in database
        * - Nullable, no default
        */
        wamid?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'whatsapp_messages_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.whatsapp_numbers**
     * - Table in database
     */
    export namespace whatsapp_numbers {
      export type Table = 'communications.whatsapp_numbers';
      export interface Selectable {
        /**
        * **communications.whatsapp_numbers.clicked_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        clicked_at: Date;
        /**
        * **communications.whatsapp_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number: string;
        /**
        * **communications.whatsapp_numbers.status**
        * - `text` in database
        * - `NOT NULL`, default: `'NOT_SUBMITTED'::text`
        */
        status: string;
        /**
        * **communications.whatsapp_numbers.whatsapp_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id: string;
      }
      export interface JSONSelectable {
        /**
        * **communications.whatsapp_numbers.clicked_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        clicked_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number: string;
        /**
        * **communications.whatsapp_numbers.status**
        * - `text` in database
        * - `NOT NULL`, default: `'NOT_SUBMITTED'::text`
        */
        status: string;
        /**
        * **communications.whatsapp_numbers.whatsapp_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id: string;
      }
      export interface Whereable {
        /**
        * **communications.whatsapp_numbers.clicked_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        clicked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_numbers.status**
        * - `text` in database
        * - `NOT NULL`, default: `'NOT_SUBMITTED'::text`
        */
        status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_numbers.whatsapp_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.whatsapp_numbers.clicked_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        clicked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.whatsapp_numbers.status**
        * - `text` in database
        * - `NOT NULL`, default: `'NOT_SUBMITTED'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_numbers.whatsapp_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.whatsapp_numbers.clicked_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        clicked_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_numbers.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_numbers.number**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        number?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.whatsapp_numbers.status**
        * - `text` in database
        * - `NOT NULL`, default: `'NOT_SUBMITTED'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_numbers.whatsapp_id**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        whatsapp_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'whatsapp_numbers_instance_id_number_unique';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.whatsapp_quick_replies**
     * - Table in database
     */
    export namespace whatsapp_quick_replies {
      export type Table = 'communications.whatsapp_quick_replies';
      export interface Selectable {
        /**
        * **communications.whatsapp_quick_replies.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.whatsapp_quick_replies.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_quick_replies_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_quick_replies.message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        message_id: string;
        /**
        * **communications.whatsapp_quick_replies.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.whatsapp_quick_replies.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number;
      }
      export interface JSONSelectable {
        /**
        * **communications.whatsapp_quick_replies.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_quick_replies.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_quick_replies_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_quick_replies.message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        message_id: string;
        /**
        * **communications.whatsapp_quick_replies.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.whatsapp_quick_replies.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number;
      }
      export interface Whereable {
        /**
        * **communications.whatsapp_quick_replies.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_quick_replies.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_quick_replies_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_quick_replies.message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        message_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_quick_replies.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_quick_replies.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.whatsapp_quick_replies.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_quick_replies.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_quick_replies_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_quick_replies.message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        message_id: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.whatsapp_quick_replies.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.whatsapp_quick_replies.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.whatsapp_quick_replies.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_quick_replies.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_quick_replies_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_quick_replies.message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        message_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.whatsapp_quick_replies.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.whatsapp_quick_replies.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'whatsapp_quick_replies_pkey' | 'whatsapp_quick_replies_thread_id_name_unique';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.whatsapp_sends**
     * - Table in database
     */
    export namespace whatsapp_sends {
      export type Table = 'communications.whatsapp_sends';
      export interface Selectable {
        /**
        * **communications.whatsapp_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at: Date | null;
        /**
        * **communications.whatsapp_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_sends_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number;
        /**
        * **communications.whatsapp_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id: number;
        /**
        * **communications.whatsapp_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at: Date;
        /**
        * **communications.whatsapp_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number;
      }
      export interface JSONSelectable {
        /**
        * **communications.whatsapp_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at: db.TimestampTzString | null;
        /**
        * **communications.whatsapp_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_sends_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number;
        /**
        * **communications.whatsapp_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id: number;
        /**
        * **communications.whatsapp_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number;
      }
      export interface Whereable {
        /**
        * **communications.whatsapp_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.whatsapp_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.whatsapp_sends.completed_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        completed_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_sends.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_sends_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_sends.list_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        list_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_sends.sent_by_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        sent_by_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_sends.started_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        started_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_sends.thread_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        thread_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'whatsapp_sends_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.whatsapp_templates**
     * - Table in database
     */
    export namespace whatsapp_templates {
      export type Table = 'communications.whatsapp_templates';
      export interface Selectable {
        /**
        * **communications.whatsapp_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.whatsapp_templates.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **communications.whatsapp_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_templates_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_templates.interactive**
        * - `bool` in database
        * - `NOT NULL`, no default
        */
        interactive: boolean;
        /**
        * **communications.whatsapp_templates.message**
        * - `whatsapp_template` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_template;
        /**
        * **communications.whatsapp_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.whatsapp_templates.status**
        * - `text` in database
        * - `NOT NULL`, default: `'CREATED'::text`
        */
        status: string;
        /**
        * **communications.whatsapp_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
        /**
        * **communications.whatsapp_templates.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id: string | null;
      }
      export interface JSONSelectable {
        /**
        * **communications.whatsapp_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_templates.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **communications.whatsapp_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_templates_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_templates.interactive**
        * - `bool` in database
        * - `NOT NULL`, no default
        */
        interactive: boolean;
        /**
        * **communications.whatsapp_templates.message**
        * - `whatsapp_template` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_template;
        /**
        * **communications.whatsapp_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.whatsapp_templates.status**
        * - `text` in database
        * - `NOT NULL`, default: `'CREATED'::text`
        */
        status: string;
        /**
        * **communications.whatsapp_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_templates.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id: string | null;
      }
      export interface Whereable {
        /**
        * **communications.whatsapp_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_templates_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.interactive**
        * - `bool` in database
        * - `NOT NULL`, no default
        */
        interactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.message**
        * - `whatsapp_template` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgWhatsapp_template | db.Parameter<c.PgWhatsapp_template> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgWhatsapp_template | db.Parameter<c.PgWhatsapp_template> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.status**
        * - `text` in database
        * - `NOT NULL`, default: `'CREATED'::text`
        */
        status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_templates.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.whatsapp_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_templates_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.interactive**
        * - `bool` in database
        * - `NOT NULL`, no default
        */
        interactive: boolean | db.Parameter<boolean> | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.message**
        * - `whatsapp_template` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message: c.PgWhatsapp_template | db.Parameter<c.PgWhatsapp_template> | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.status**
        * - `text` in database
        * - `NOT NULL`, default: `'CREATED'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_templates.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.whatsapp_templates.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_templates_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.interactive**
        * - `bool` in database
        * - `NOT NULL`, no default
        */
        interactive?: boolean | db.Parameter<boolean> | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.message**
        * - `whatsapp_template` (base type: `jsonb`) in database
        * - `NOT NULL`, no default
        */
        message?: c.PgWhatsapp_template | db.Parameter<c.PgWhatsapp_template> | db.SQLFragment | db.SQLFragment<any, c.PgWhatsapp_template | db.Parameter<c.PgWhatsapp_template> | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.status**
        * - `text` in database
        * - `NOT NULL`, default: `'CREATED'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_templates.whatsapp_id**
        * - `text` in database
        * - Nullable, no default
        */
        whatsapp_id?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'whatsapp_templates_instance_id_name_unique' | 'whatsapp_templates_instance_id_whatsapp_id_unique' | 'whatsapp_templates_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **communications.whatsapp_threads**
     * - Table in database
     */
    export namespace whatsapp_threads {
      export type Table = 'communications.whatsapp_threads';
      export interface Selectable {
        /**
        * **communications.whatsapp_threads.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions: c.PgCommunication_actions;
        /**
        * **communications.whatsapp_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **communications.whatsapp_threads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **communications.whatsapp_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_threads_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.whatsapp_threads.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **communications.whatsapp_threads.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id: number;
        /**
        * **communications.whatsapp_threads.template_message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        template_message_id: string;
        /**
        * **communications.whatsapp_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **communications.whatsapp_threads.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions: c.PgCommunication_actions;
        /**
        * **communications.whatsapp_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **communications.whatsapp_threads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **communications.whatsapp_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_threads_id_seq'::regclass)`
        */
        id: number;
        /**
        * **communications.whatsapp_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **communications.whatsapp_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **communications.whatsapp_threads.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **communications.whatsapp_threads.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id: number;
        /**
        * **communications.whatsapp_threads.template_message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        template_message_id: string;
        /**
        * **communications.whatsapp_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **communications.whatsapp_threads.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_threads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.template_message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        template_message_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **communications.whatsapp_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **communications.whatsapp_threads.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_threads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.template_message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        template_message_id: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **communications.whatsapp_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **communications.whatsapp_threads.actions**
        * - `communication_actions` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{}'::jsonb`
        */
        actions?: c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgCommunication_actions | db.Parameter<c.PgCommunication_actions> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('communications.whatsapp_threads_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.template_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        template_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.template_message_id**
        * - `uuid` in database
        * - `NOT NULL`, no default
        */
        template_message_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **communications.whatsapp_threads.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'whatsapp_threads_instance_id_name_unique' | 'whatsapp_threads_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = email_messages.Table | email_sends.Table | email_templates.Table | received_emails.Table | received_sms.Table | received_whatsapp_group_messages.Table | received_whatsapp_messages.Table | sent_emails.Table | sent_sms.Table | sent_whatsapp_messages.Table | sms_messages.Table | sms_numbers.Table | sms_sends.Table | sms_threads.Table | whatsapp_conversations.Table | whatsapp_messages.Table | whatsapp_numbers.Table | whatsapp_quick_replies.Table | whatsapp_sends.Table | whatsapp_templates.Table | whatsapp_threads.Table;
    export type Selectable = email_messages.Selectable | email_sends.Selectable | email_templates.Selectable | received_emails.Selectable | received_sms.Selectable | received_whatsapp_group_messages.Selectable | received_whatsapp_messages.Selectable | sent_emails.Selectable | sent_sms.Selectable | sent_whatsapp_messages.Selectable | sms_messages.Selectable | sms_numbers.Selectable | sms_sends.Selectable | sms_threads.Selectable | whatsapp_conversations.Selectable | whatsapp_messages.Selectable | whatsapp_numbers.Selectable | whatsapp_quick_replies.Selectable | whatsapp_sends.Selectable | whatsapp_templates.Selectable | whatsapp_threads.Selectable;
    export type JSONSelectable = email_messages.JSONSelectable | email_sends.JSONSelectable | email_templates.JSONSelectable | received_emails.JSONSelectable | received_sms.JSONSelectable | received_whatsapp_group_messages.JSONSelectable | received_whatsapp_messages.JSONSelectable | sent_emails.JSONSelectable | sent_sms.JSONSelectable | sent_whatsapp_messages.JSONSelectable | sms_messages.JSONSelectable | sms_numbers.JSONSelectable | sms_sends.JSONSelectable | sms_threads.JSONSelectable | whatsapp_conversations.JSONSelectable | whatsapp_messages.JSONSelectable | whatsapp_numbers.JSONSelectable | whatsapp_quick_replies.JSONSelectable | whatsapp_sends.JSONSelectable | whatsapp_templates.JSONSelectable | whatsapp_threads.JSONSelectable;
    export type Whereable = email_messages.Whereable | email_sends.Whereable | email_templates.Whereable | received_emails.Whereable | received_sms.Whereable | received_whatsapp_group_messages.Whereable | received_whatsapp_messages.Whereable | sent_emails.Whereable | sent_sms.Whereable | sent_whatsapp_messages.Whereable | sms_messages.Whereable | sms_numbers.Whereable | sms_sends.Whereable | sms_threads.Whereable | whatsapp_conversations.Whereable | whatsapp_messages.Whereable | whatsapp_numbers.Whereable | whatsapp_quick_replies.Whereable | whatsapp_sends.Whereable | whatsapp_templates.Whereable | whatsapp_threads.Whereable;
    export type Insertable = email_messages.Insertable | email_sends.Insertable | email_templates.Insertable | received_emails.Insertable | received_sms.Insertable | received_whatsapp_group_messages.Insertable | received_whatsapp_messages.Insertable | sent_emails.Insertable | sent_sms.Insertable | sent_whatsapp_messages.Insertable | sms_messages.Insertable | sms_numbers.Insertable | sms_sends.Insertable | sms_threads.Insertable | whatsapp_conversations.Insertable | whatsapp_messages.Insertable | whatsapp_numbers.Insertable | whatsapp_quick_replies.Insertable | whatsapp_sends.Insertable | whatsapp_templates.Insertable | whatsapp_threads.Insertable;
    export type Updatable = email_messages.Updatable | email_sends.Updatable | email_templates.Updatable | received_emails.Updatable | received_sms.Updatable | received_whatsapp_group_messages.Updatable | received_whatsapp_messages.Updatable | sent_emails.Updatable | sent_sms.Updatable | sent_whatsapp_messages.Updatable | sms_messages.Updatable | sms_numbers.Updatable | sms_sends.Updatable | sms_threads.Updatable | whatsapp_conversations.Updatable | whatsapp_messages.Updatable | whatsapp_numbers.Updatable | whatsapp_quick_replies.Updatable | whatsapp_sends.Updatable | whatsapp_templates.Updatable | whatsapp_threads.Updatable;
    export type UniqueIndex = email_messages.UniqueIndex | email_sends.UniqueIndex | email_templates.UniqueIndex | received_emails.UniqueIndex | received_sms.UniqueIndex | received_whatsapp_group_messages.UniqueIndex | received_whatsapp_messages.UniqueIndex | sent_emails.UniqueIndex | sent_sms.UniqueIndex | sent_whatsapp_messages.UniqueIndex | sms_messages.UniqueIndex | sms_numbers.UniqueIndex | sms_sends.UniqueIndex | sms_threads.UniqueIndex | whatsapp_conversations.UniqueIndex | whatsapp_messages.UniqueIndex | whatsapp_numbers.UniqueIndex | whatsapp_quick_replies.UniqueIndex | whatsapp_sends.UniqueIndex | whatsapp_templates.UniqueIndex | whatsapp_threads.UniqueIndex;
    export type Column = email_messages.Column | email_sends.Column | email_templates.Column | received_emails.Column | received_sms.Column | received_whatsapp_group_messages.Column | received_whatsapp_messages.Column | sent_emails.Column | sent_sms.Column | sent_whatsapp_messages.Column | sms_messages.Column | sms_numbers.Column | sms_sends.Column | sms_threads.Column | whatsapp_conversations.Column | whatsapp_messages.Column | whatsapp_numbers.Column | whatsapp_quick_replies.Column | whatsapp_sends.Column | whatsapp_templates.Column | whatsapp_threads.Column;
  
    export type AllBaseTables = [email_messages.Table, email_sends.Table, email_templates.Table, received_emails.Table, received_sms.Table, received_whatsapp_group_messages.Table, received_whatsapp_messages.Table, sent_emails.Table, sent_sms.Table, sent_whatsapp_messages.Table, sms_messages.Table, sms_numbers.Table, sms_sends.Table, sms_threads.Table, whatsapp_conversations.Table, whatsapp_messages.Table, whatsapp_numbers.Table, whatsapp_quick_replies.Table, whatsapp_sends.Table, whatsapp_templates.Table, whatsapp_threads.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [email_messages.Table, email_sends.Table, email_templates.Table, received_emails.Table, received_sms.Table, received_whatsapp_group_messages.Table, received_whatsapp_messages.Table, sent_emails.Table, sent_sms.Table, sent_whatsapp_messages.Table, sms_messages.Table, sms_numbers.Table, sms_sends.Table, sms_threads.Table, whatsapp_conversations.Table, whatsapp_messages.Table, whatsapp_numbers.Table, whatsapp_quick_replies.Table, whatsapp_sends.Table, whatsapp_templates.Table, whatsapp_threads.Table];
  }


  /* === schema: events === */

  export namespace events {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **events.attendees**
     * - Table in database
     */
    export namespace attendees {
      export type Table = 'events.attendees';
      export interface Selectable {
        /**
        * **events.attendees.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **events.attendees.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id: number;
        /**
        * **events.attendees.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes: string | null;
        /**
        * **events.attendees.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **events.attendees.send_notifications**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_notifications: boolean;
        /**
        * **events.attendees.status**
        * - `text` in database
        * - `NOT NULL`, default: `'registered'::text`
        */
        status: string;
        /**
        * **events.attendees.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **events.attendees.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **events.attendees.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id: number;
        /**
        * **events.attendees.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes: string | null;
        /**
        * **events.attendees.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **events.attendees.send_notifications**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_notifications: boolean;
        /**
        * **events.attendees.status**
        * - `text` in database
        * - `NOT NULL`, default: `'registered'::text`
        */
        status: string;
        /**
        * **events.attendees.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **events.attendees.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.attendees.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.attendees.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.attendees.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.attendees.send_notifications**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_notifications?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.attendees.status**
        * - `text` in database
        * - `NOT NULL`, default: `'registered'::text`
        */
        status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.attendees.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **events.attendees.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **events.attendees.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.attendees.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.attendees.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.attendees.send_notifications**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_notifications?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.attendees.status**
        * - `text` in database
        * - `NOT NULL`, default: `'registered'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **events.attendees.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **events.attendees.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.attendees.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.attendees.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.attendees.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.attendees.send_notifications**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_notifications?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.attendees.status**
        * - `text` in database
        * - `NOT NULL`, default: `'registered'::text`
        */
        status?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.attendees.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'attendees_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **events.event_attendees_view**
     * - View in database
     */
    export namespace event_attendees_view {
      export type Table = 'events.event_attendees_view';
      export interface Selectable {
        /**
        * **events.event_attendees_view.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **events.event_attendees_view.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **events.event_attendees_view.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country: string | null;
        /**
        * **events.event_attendees_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: Date | null;
        /**
        * **events.event_attendees_view.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **events.event_attendees_view.event_id**
        * - `int4` in database
        * - Nullable, no default
        */
        event_id: number | null;
        /**
        * **events.event_attendees_view.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **events.event_attendees_view.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name: string | null;
        /**
        * **events.event_attendees_view.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **events.event_attendees_view.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **events.event_attendees_view.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes: string | null;
        /**
        * **events.event_attendees_view.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **events.event_attendees_view.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **events.event_attendees_view.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **events.event_attendees_view.send_notifications**
        * - `bool` in database
        * - Nullable, no default
        */
        send_notifications: boolean | null;
        /**
        * **events.event_attendees_view.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **events.event_attendees_view.status**
        * - `text` in database
        * - Nullable, no default
        */
        status: string | null;
        /**
        * **events.event_attendees_view.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: Date | null;
      }
      export interface JSONSelectable {
        /**
        * **events.event_attendees_view.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **events.event_attendees_view.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **events.event_attendees_view.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country: string | null;
        /**
        * **events.event_attendees_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: db.TimestampTzString | null;
        /**
        * **events.event_attendees_view.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **events.event_attendees_view.event_id**
        * - `int4` in database
        * - Nullable, no default
        */
        event_id: number | null;
        /**
        * **events.event_attendees_view.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **events.event_attendees_view.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name: string | null;
        /**
        * **events.event_attendees_view.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **events.event_attendees_view.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **events.event_attendees_view.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes: string | null;
        /**
        * **events.event_attendees_view.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **events.event_attendees_view.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **events.event_attendees_view.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **events.event_attendees_view.send_notifications**
        * - `bool` in database
        * - Nullable, no default
        */
        send_notifications: boolean | null;
        /**
        * **events.event_attendees_view.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **events.event_attendees_view.status**
        * - `text` in database
        * - Nullable, no default
        */
        status: string | null;
        /**
        * **events.event_attendees_view.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at: db.TimestampTzString | null;
      }
      export interface Whereable {
        /**
        * **events.event_attendees_view.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.event_id**
        * - `int4` in database
        * - Nullable, no default
        */
        event_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.notes**
        * - `text` in database
        * - Nullable, no default
        */
        notes?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.send_notifications**
        * - `bool` in database
        * - Nullable, no default
        */
        send_notifications?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.status**
        * - `text` in database
        * - Nullable, no default
        */
        status?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.event_attendees_view.updated_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        [key: string]: never;
      }
      export interface Updatable {
        [key: string]: never;
      }
      export type UniqueIndex = never;
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **events.events**
     * - Table in database
     */
    export namespace events {
      export type Table = 'events.events';
      export interface Selectable {
        /**
        * **events.events.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **events.events.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **events.events.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **events.events.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3: string | null;
        /**
        * **events.events.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4: string | null;
        /**
        * **events.events.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address: boolean;
        /**
        * **events.events.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email: boolean;
        /**
        * **events.events.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number: boolean;
        /**
        * **events.events.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode: boolean;
        /**
        * **events.events.cancellation_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        cancellation_email: number;
        /**
        * **events.events.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country: string;
        /**
        * **events.events.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **events.events.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code: c.PgCustom_code;
        /**
        * **events.events.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **events.events.ends_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        ends_at: Date;
        /**
        * **events.events.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id: number | null;
        /**
        * **events.events.followup_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        followup_email: number;
        /**
        * **events.events.followup_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        followup_sent_at: Date | null;
        /**
        * **events.events.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string;
        /**
        * **events.events.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **events.events.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags: c.PgHtml_metatags;
        /**
        * **events.events.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('events.events_id_seq'::regclass)`
        */
        id: number;
        /**
        * **events.events.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **events.events.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng: c.PgGeometry | null;
        /**
        * **events.events.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **events.events.max_attendees**
        * - `int4` in database
        * - Nullable, no default
        */
        max_attendees: number | null;
        /**
        * **events.events.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **events.events.online**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        online: boolean;
        /**
        * **events.events.online_instructions**
        * - `text` in database
        * - Nullable, no default
        */
        online_instructions: string | null;
        /**
        * **events.events.online_url**
        * - `text` in database
        * - Nullable, no default
        */
        online_url: string | null;
        /**
        * **events.events.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **events.events.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **events.events.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at: Date | null;
        /**
        * **events.events.registration_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        registration_email: number;
        /**
        * **events.events.reminder_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        reminder_email: number;
        /**
        * **events.events.reminder_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reminder_sent_at: Date | null;
        /**
        * **events.events.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address: boolean;
        /**
        * **events.events.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email: boolean;
        /**
        * **events.events.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number: boolean;
        /**
        * **events.events.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode: boolean;
        /**
        * **events.events.send_cancellation_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_cancellation_email: boolean;
        /**
        * **events.events.send_followup_email**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        send_followup_email: boolean;
        /**
        * **events.events.send_followup_hours_after_end**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_followup_hours_after_end: number;
        /**
        * **events.events.send_registration_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_registration_email: boolean;
        /**
        * **events.events.send_reminder_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_reminder_email: boolean;
        /**
        * **events.events.send_reminder_hours_before_start**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_reminder_hours_before_start: number;
        /**
        * **events.events.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **events.events.starts_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        starts_at: Date;
        /**
        * **events.events.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **events.events.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **events.events.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **events.events.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **events.events.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **events.events.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3: string | null;
        /**
        * **events.events.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4: string | null;
        /**
        * **events.events.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address: boolean;
        /**
        * **events.events.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email: boolean;
        /**
        * **events.events.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number: boolean;
        /**
        * **events.events.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode: boolean;
        /**
        * **events.events.cancellation_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        cancellation_email: number;
        /**
        * **events.events.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country: string;
        /**
        * **events.events.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **events.events.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code: c.PgCustom_code;
        /**
        * **events.events.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **events.events.ends_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        ends_at: db.TimestampTzString;
        /**
        * **events.events.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id: number | null;
        /**
        * **events.events.followup_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        followup_email: number;
        /**
        * **events.events.followup_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        followup_sent_at: db.TimestampTzString | null;
        /**
        * **events.events.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string;
        /**
        * **events.events.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **events.events.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags: c.PgHtml_metatags;
        /**
        * **events.events.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('events.events_id_seq'::regclass)`
        */
        id: number;
        /**
        * **events.events.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **events.events.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng: c.PgGeometry | null;
        /**
        * **events.events.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **events.events.max_attendees**
        * - `int4` in database
        * - Nullable, no default
        */
        max_attendees: number | null;
        /**
        * **events.events.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **events.events.online**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        online: boolean;
        /**
        * **events.events.online_instructions**
        * - `text` in database
        * - Nullable, no default
        */
        online_instructions: string | null;
        /**
        * **events.events.online_url**
        * - `text` in database
        * - Nullable, no default
        */
        online_url: string | null;
        /**
        * **events.events.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **events.events.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **events.events.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at: db.TimestampTzString | null;
        /**
        * **events.events.registration_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        registration_email: number;
        /**
        * **events.events.reminder_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        reminder_email: number;
        /**
        * **events.events.reminder_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reminder_sent_at: db.TimestampTzString | null;
        /**
        * **events.events.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address: boolean;
        /**
        * **events.events.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email: boolean;
        /**
        * **events.events.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number: boolean;
        /**
        * **events.events.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode: boolean;
        /**
        * **events.events.send_cancellation_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_cancellation_email: boolean;
        /**
        * **events.events.send_followup_email**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        send_followup_email: boolean;
        /**
        * **events.events.send_followup_hours_after_end**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_followup_hours_after_end: number;
        /**
        * **events.events.send_registration_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_registration_email: boolean;
        /**
        * **events.events.send_reminder_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_reminder_email: boolean;
        /**
        * **events.events.send_reminder_hours_before_start**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_reminder_hours_before_start: number;
        /**
        * **events.events.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **events.events.starts_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        starts_at: db.TimestampTzString;
        /**
        * **events.events.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
        /**
        * **events.events.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **events.events.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.cancellation_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        cancellation_email?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.ends_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        ends_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.followup_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        followup_email?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.followup_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        followup_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('events.events_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.max_attendees**
        * - `int4` in database
        * - Nullable, no default
        */
        max_attendees?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.online**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        online?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.online_instructions**
        * - `text` in database
        * - Nullable, no default
        */
        online_instructions?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.online_url**
        * - `text` in database
        * - Nullable, no default
        */
        online_url?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.registration_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        registration_email?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.reminder_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        reminder_email?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.reminder_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reminder_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.send_cancellation_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_cancellation_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.send_followup_email**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        send_followup_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.send_followup_hours_after_end**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_followup_hours_after_end?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.send_registration_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_registration_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.send_reminder_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_reminder_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.send_reminder_hours_before_start**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_reminder_hours_before_start?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.starts_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        starts_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.events.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **events.events.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.cancellation_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        cancellation_email: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.events.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **events.events.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.ends_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        ends_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        /**
        * **events.events.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.followup_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        followup_email: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.events.followup_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        followup_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **events.events.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('events.events_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.events.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.max_attendees**
        * - `int4` in database
        * - Nullable, no default
        */
        max_attendees?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **events.events.online**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        online?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.online_instructions**
        * - `text` in database
        * - Nullable, no default
        */
        online_instructions?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.online_url**
        * - `text` in database
        * - Nullable, no default
        */
        online_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.events.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.registration_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        registration_email: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.events.reminder_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        reminder_email: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.events.reminder_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reminder_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.send_cancellation_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_cancellation_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.send_followup_email**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        send_followup_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.send_followup_hours_after_end**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_followup_hours_after_end?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.send_registration_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_registration_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.send_reminder_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_reminder_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.send_reminder_hours_before_start**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_reminder_hours_before_start?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **events.events.starts_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        starts_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        /**
        * **events.events.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        /**
        * **events.events.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **events.events.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.address_line_3**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_3?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.address_line_4**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_4?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.cancellation_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        cancellation_email?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.events.country**
        * - `varchar` in database
        * - `NOT NULL`, no default
        */
        country?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **events.events.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.ends_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        ends_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        /**
        * **events.events.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.followup_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        followup_email?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.events.followup_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        followup_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **events.events.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('events.events_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.events.latlng**
        * - `geometry` in database
        * - Nullable, no default
        */
        latlng?: c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgGeometry | db.Parameter<c.PgGeometry> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.max_attendees**
        * - `int4` in database
        * - Nullable, no default
        */
        max_attendees?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **events.events.online**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        online?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.online_instructions**
        * - `text` in database
        * - Nullable, no default
        */
        online_instructions?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.online_url**
        * - `text` in database
        * - Nullable, no default
        */
        online_url?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.events.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.registration_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        registration_email?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.events.reminder_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        reminder_email?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.events.reminder_sent_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        reminder_sent_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.send_cancellation_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_cancellation_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.send_followup_email**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        send_followup_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.send_followup_hours_after_end**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_followup_hours_after_end?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.send_registration_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_registration_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.send_reminder_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_reminder_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.send_reminder_hours_before_start**
        * - `int4` in database
        * - `NOT NULL`, default: `24`
        */
        send_reminder_hours_before_start?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **events.events.starts_at**
        * - `timestamptz` in database
        * - `NOT NULL`, no default
        */
        starts_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        /**
        * **events.events.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **events.events.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'events_instance_id_name_unique' | 'events_instance_id_slug_unique' | 'events_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **events.taggings**
     * - Table in database
     */
    export namespace taggings {
      export type Table = 'events.taggings';
      export interface Selectable {
        /**
        * **events.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **events.taggings.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id: number;
        /**
        * **events.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface JSONSelectable {
        /**
        * **events.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **events.taggings.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id: number;
        /**
        * **events.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface Whereable {
        /**
        * **events.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.taggings.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **events.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **events.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **events.taggings.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **events.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **events.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **events.taggings.event_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        event_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **events.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'taggings_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = attendees.Table | event_attendees_view.Table | events.Table | taggings.Table;
    export type Selectable = attendees.Selectable | event_attendees_view.Selectable | events.Selectable | taggings.Selectable;
    export type JSONSelectable = attendees.JSONSelectable | event_attendees_view.JSONSelectable | events.JSONSelectable | taggings.JSONSelectable;
    export type Whereable = attendees.Whereable | event_attendees_view.Whereable | events.Whereable | taggings.Whereable;
    export type Insertable = attendees.Insertable | event_attendees_view.Insertable | events.Insertable | taggings.Insertable;
    export type Updatable = attendees.Updatable | event_attendees_view.Updatable | events.Updatable | taggings.Updatable;
    export type UniqueIndex = attendees.UniqueIndex | event_attendees_view.UniqueIndex | events.UniqueIndex | taggings.UniqueIndex;
    export type Column = attendees.Column | event_attendees_view.Column | events.Column | taggings.Column;
  
    export type AllBaseTables = [attendees.Table, events.Table, taggings.Table];
    export type AllForeignTables = [];
    export type AllViews = [event_attendees_view.Table];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [attendees.Table, event_attendees_view.Table, events.Table, taggings.Table];
  }


  /* === schema: petitions === */

  export namespace petitions {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    /**
     * **petitions.petition_signatures_view**
     * - View in database
     */
    export namespace petition_signatures_view {
      export type Table = 'petitions.petition_signatures_view';
      export interface Selectable {
        /**
        * **petitions.petition_signatures_view.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **petitions.petition_signatures_view.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **petitions.petition_signatures_view.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country: string | null;
        /**
        * **petitions.petition_signatures_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: Date | null;
        /**
        * **petitions.petition_signatures_view.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **petitions.petition_signatures_view.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **petitions.petition_signatures_view.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name: string | null;
        /**
        * **petitions.petition_signatures_view.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **petitions.petition_signatures_view.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **petitions.petition_signatures_view.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **petitions.petition_signatures_view.petition_id**
        * - `int4` in database
        * - Nullable, no default
        */
        petition_id: number | null;
        /**
        * **petitions.petition_signatures_view.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **petitions.petition_signatures_view.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **petitions.petition_signatures_view.send_autoresponse**
        * - `bool` in database
        * - Nullable, no default
        */
        send_autoresponse: boolean | null;
        /**
        * **petitions.petition_signatures_view.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
      }
      export interface JSONSelectable {
        /**
        * **petitions.petition_signatures_view.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1: string | null;
        /**
        * **petitions.petition_signatures_view.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2: string | null;
        /**
        * **petitions.petition_signatures_view.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country: string | null;
        /**
        * **petitions.petition_signatures_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at: db.TimestampTzString | null;
        /**
        * **petitions.petition_signatures_view.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email: c.PgEmail | null;
        /**
        * **petitions.petition_signatures_view.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name: string | null;
        /**
        * **petitions.petition_signatures_view.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name: string | null;
        /**
        * **petitions.petition_signatures_view.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name: string | null;
        /**
        * **petitions.petition_signatures_view.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality: string | null;
        /**
        * **petitions.petition_signatures_view.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id: number | null;
        /**
        * **petitions.petition_signatures_view.petition_id**
        * - `int4` in database
        * - Nullable, no default
        */
        petition_id: number | null;
        /**
        * **petitions.petition_signatures_view.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number: c.PgPhone_number | null;
        /**
        * **petitions.petition_signatures_view.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode: string | null;
        /**
        * **petitions.petition_signatures_view.send_autoresponse**
        * - `bool` in database
        * - Nullable, no default
        */
        send_autoresponse: boolean | null;
        /**
        * **petitions.petition_signatures_view.state**
        * - `text` in database
        * - Nullable, no default
        */
        state: string | null;
      }
      export interface Whereable {
        /**
        * **petitions.petition_signatures_view.address_line_1**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_1?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.address_line_2**
        * - `text` in database
        * - Nullable, no default
        */
        address_line_2?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.country**
        * - `varchar` in database
        * - Nullable, no default
        */
        country?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.created_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.email**
        * - `email` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        email?: c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgEmail | db.Parameter<c.PgEmail> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.family_name**
        * - `text` in database
        * - Nullable, no default
        */
        family_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.full_name**
        * - `text` in database
        * - Nullable, no default
        */
        full_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.given_name**
        * - `text` in database
        * - Nullable, no default
        */
        given_name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.locality**
        * - `text` in database
        * - Nullable, no default
        */
        locality?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.person_id**
        * - `int4` in database
        * - Nullable, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.petition_id**
        * - `int4` in database
        * - Nullable, no default
        */
        petition_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.phone_number**
        * - `phone_number` (base type: `jsonb`) in database
        * - Nullable, no default
        */
        phone_number?: c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgPhone_number | db.Parameter<c.PgPhone_number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.postcode**
        * - `text` in database
        * - Nullable, no default
        */
        postcode?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.send_autoresponse**
        * - `bool` in database
        * - Nullable, no default
        */
        send_autoresponse?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petition_signatures_view.state**
        * - `text` in database
        * - Nullable, no default
        */
        state?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        [key: string]: never;
      }
      export interface Updatable {
        [key: string]: never;
      }
      export type UniqueIndex = never;
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **petitions.petitions**
     * - Table in database
     */
    export namespace petitions {
      export type Table = 'petitions.petitions';
      export interface Selectable {
        /**
        * **petitions.petitions.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **petitions.petitions.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address: boolean;
        /**
        * **petitions.petitions.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email: boolean;
        /**
        * **petitions.petitions.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number: boolean;
        /**
        * **petitions.petitions.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode: boolean;
        /**
        * **petitions.petitions.autoresponse_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        autoresponse_email: number;
        /**
        * **petitions.petitions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **petitions.petitions.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code: c.PgCustom_code;
        /**
        * **petitions.petitions.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: Date | null;
        /**
        * **petitions.petitions.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id: number | null;
        /**
        * **petitions.petitions.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string;
        /**
        * **petitions.petitions.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **petitions.petitions.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags: c.PgHtml_metatags;
        /**
        * **petitions.petitions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('petitions.petitions_id_seq'::regclass)`
        */
        id: number;
        /**
        * **petitions.petitions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **petitions.petitions.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **petitions.petitions.petition_target**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_target: string;
        /**
        * **petitions.petitions.petition_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_text: string;
        /**
        * **petitions.petitions.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **petitions.petitions.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at: Date | null;
        /**
        * **petitions.petitions.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address: boolean;
        /**
        * **petitions.petitions.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email: boolean;
        /**
        * **petitions.petitions.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number: boolean;
        /**
        * **petitions.petitions.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode: boolean;
        /**
        * **petitions.petitions.send_autoresponse_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse_email: boolean;
        /**
        * **petitions.petitions.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **petitions.petitions.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: Date;
      }
      export interface JSONSelectable {
        /**
        * **petitions.petitions.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active: boolean;
        /**
        * **petitions.petitions.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address: boolean;
        /**
        * **petitions.petitions.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email: boolean;
        /**
        * **petitions.petitions.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number: boolean;
        /**
        * **petitions.petitions.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode: boolean;
        /**
        * **petitions.petitions.autoresponse_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        autoresponse_email: number;
        /**
        * **petitions.petitions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **petitions.petitions.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code: c.PgCustom_code;
        /**
        * **petitions.petitions.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at: db.TimestampTzString | null;
        /**
        * **petitions.petitions.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id: number | null;
        /**
        * **petitions.petitions.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string;
        /**
        * **petitions.petitions.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html: string;
        /**
        * **petitions.petitions.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags: c.PgHtml_metatags;
        /**
        * **petitions.petitions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('petitions.petitions_id_seq'::regclass)`
        */
        id: number;
        /**
        * **petitions.petitions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number;
        /**
        * **petitions.petitions.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string;
        /**
        * **petitions.petitions.petition_target**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_target: string;
        /**
        * **petitions.petitions.petition_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_text: string;
        /**
        * **petitions.petitions.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number;
        /**
        * **petitions.petitions.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at: db.TimestampTzString | null;
        /**
        * **petitions.petitions.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address: boolean;
        /**
        * **petitions.petitions.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email: boolean;
        /**
        * **petitions.petitions.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number: boolean;
        /**
        * **petitions.petitions.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode: boolean;
        /**
        * **petitions.petitions.send_autoresponse_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse_email: boolean;
        /**
        * **petitions.petitions.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string;
        /**
        * **petitions.petitions.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        /**
        * **petitions.petitions.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.autoresponse_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        autoresponse_email?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('petitions.petitions_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.petition_target**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_target?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.petition_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_text?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.send_autoresponse_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse_email?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.petitions.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **petitions.petitions.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.autoresponse_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        autoresponse_email: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **petitions.petitions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **petitions.petitions.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('petitions.petitions_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **petitions.petitions.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **petitions.petitions.petition_target**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_target: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **petitions.petitions.petition_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_text: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **petitions.petitions.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **petitions.petitions.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.send_autoresponse_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.petitions.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug: string | db.Parameter<string> | db.SQLFragment;
        /**
        * **petitions.petitions.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **petitions.petitions.active**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.ask_address**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.ask_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.ask_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.ask_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        ask_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.autoresponse_email**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        autoresponse_email?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **petitions.petitions.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.custom_code**
        * - `custom_code` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"custom_js": null, "custom_css": null, "custom_html_body": null, "custom_html_head": null}'::jsonb`
        */
        custom_code?: c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgCustom_code | db.Parameter<c.PgCustom_code> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.deleted_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        deleted_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.feature_image_upload_id**
        * - `int4` in database
        * - Nullable, no default
        */
        feature_image_upload_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.heading**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        heading?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **petitions.petitions.html**
        * - `text` in database
        * - `NOT NULL`, default: `''::text`
        */
        html?: string | db.Parameter<string> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.html_metatags**
        * - `html_metatags` (base type: `jsonb`) in database
        * - `NOT NULL`, default: `'{"title": null, "subject": null, "twitter": {"card": "summary", "image": null, "title": null, "image_alt": null, "description": null}, "keywords": null, "openGraph": {"image": null, "title": null, "image_alt": null, "description": null}, "description": null}'::jsonb`
        */
        html_metatags?: c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, c.PgHtml_metatags | db.Parameter<c.PgHtml_metatags> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.id**
        * - `int4` in database
        * - `NOT NULL`, default: `nextval('petitions.petitions_id_seq'::regclass)`
        */
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.instance_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        instance_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **petitions.petitions.name**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **petitions.petitions.petition_target**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_target?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **petitions.petitions.petition_text**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        petition_text?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **petitions.petitions.point_person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        point_person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **petitions.petitions.published_at**
        * - `timestamptz` in database
        * - Nullable, no default
        */
        published_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.require_address**
        * - `bool` in database
        * - `NOT NULL`, default: `false`
        */
        require_address?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.require_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.require_phone_number**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_phone_number?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.require_postcode**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        require_postcode?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.send_autoresponse_email**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse_email?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.petitions.slug**
        * - `text` in database
        * - `NOT NULL`, no default
        */
        slug?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        /**
        * **petitions.petitions.updated_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'petitions_instance_id_name_unique' | 'petitions_instance_id_slug_unique' | 'petitions_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **petitions.signatures**
     * - Table in database
     */
    export namespace signatures {
      export type Table = 'petitions.signatures';
      export interface Selectable {
        /**
        * **petitions.signatures.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **petitions.signatures.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **petitions.signatures.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id: number;
        /**
        * **petitions.signatures.send_autoresponse**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse: boolean;
      }
      export interface JSONSelectable {
        /**
        * **petitions.signatures.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **petitions.signatures.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number;
        /**
        * **petitions.signatures.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id: number;
        /**
        * **petitions.signatures.send_autoresponse**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse: boolean;
      }
      export interface Whereable {
        /**
        * **petitions.signatures.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.signatures.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.signatures.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.signatures.send_autoresponse**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **petitions.signatures.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.signatures.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **petitions.signatures.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **petitions.signatures.send_autoresponse**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **petitions.signatures.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.signatures.person_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        person_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **petitions.signatures.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **petitions.signatures.send_autoresponse**
        * - `bool` in database
        * - `NOT NULL`, default: `true`
        */
        send_autoresponse?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'signatures_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /**
     * **petitions.taggings**
     * - Table in database
     */
    export namespace taggings {
      export type Table = 'petitions.taggings';
      export interface Selectable {
        /**
        * **petitions.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: Date;
        /**
        * **petitions.taggings.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id: number;
        /**
        * **petitions.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface JSONSelectable {
        /**
        * **petitions.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at: db.TimestampTzString;
        /**
        * **petitions.taggings.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id: number;
        /**
        * **petitions.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number;
      }
      export interface Whereable {
        /**
        * **petitions.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.taggings.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        /**
        * **petitions.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        /**
        * **petitions.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        /**
        * **petitions.taggings.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id: number | db.Parameter<number> | db.SQLFragment;
        /**
        * **petitions.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id: number | db.Parameter<number> | db.SQLFragment;
      }
      export interface Updatable {
        /**
        * **petitions.taggings.created_at**
        * - `timestamptz` in database
        * - `NOT NULL`, default: `CURRENT_TIMESTAMP`
        */
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        /**
        * **petitions.taggings.petition_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        petition_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
        /**
        * **petitions.taggings.tag_id**
        * - `int4` in database
        * - `NOT NULL`, no default
        */
        tag_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      }
      export type UniqueIndex = 'taggings_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = petition_signatures_view.Table | petitions.Table | signatures.Table | taggings.Table;
    export type Selectable = petition_signatures_view.Selectable | petitions.Selectable | signatures.Selectable | taggings.Selectable;
    export type JSONSelectable = petition_signatures_view.JSONSelectable | petitions.JSONSelectable | signatures.JSONSelectable | taggings.JSONSelectable;
    export type Whereable = petition_signatures_view.Whereable | petitions.Whereable | signatures.Whereable | taggings.Whereable;
    export type Insertable = petition_signatures_view.Insertable | petitions.Insertable | signatures.Insertable | taggings.Insertable;
    export type Updatable = petition_signatures_view.Updatable | petitions.Updatable | signatures.Updatable | taggings.Updatable;
    export type UniqueIndex = petition_signatures_view.UniqueIndex | petitions.UniqueIndex | signatures.UniqueIndex | taggings.UniqueIndex;
    export type Column = petition_signatures_view.Column | petitions.Column | signatures.Column | taggings.Column;
  
    export type AllBaseTables = [petitions.Table, signatures.Table, taggings.Table];
    export type AllForeignTables = [];
    export type AllViews = [petition_signatures_view.Table];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [petition_signatures_view.Table, petitions.Table, signatures.Table, taggings.Table];
  }


  /* === global aggregate types === */

  export type Schema = 'public' | 'people' | 'website' | 'communications' | 'events' | 'petitions';
  export type Table = public.Table | people.Table | website.Table | communications.Table | events.Table | petitions.Table;
  export type Selectable = public.Selectable | people.Selectable | website.Selectable | communications.Selectable | events.Selectable | petitions.Selectable;
  export type JSONSelectable = public.JSONSelectable | people.JSONSelectable | website.JSONSelectable | communications.JSONSelectable | events.JSONSelectable | petitions.JSONSelectable;
  export type Whereable = public.Whereable | people.Whereable | website.Whereable | communications.Whereable | events.Whereable | petitions.Whereable;
  export type Insertable = public.Insertable | people.Insertable | website.Insertable | communications.Insertable | events.Insertable | petitions.Insertable;
  export type Updatable = public.Updatable | people.Updatable | website.Updatable | communications.Updatable | events.Updatable | petitions.Updatable;
  export type UniqueIndex = public.UniqueIndex | people.UniqueIndex | website.UniqueIndex | communications.UniqueIndex | events.UniqueIndex | petitions.UniqueIndex;
  export type Column = public.Column | people.Column | website.Column | communications.Column | events.Column | petitions.Column;

  export type AllSchemas = ['public', 'people', 'website', 'communications', 'events', 'petitions'];
  export type AllBaseTables = [...public.AllBaseTables, ...people.AllBaseTables, ...website.AllBaseTables, ...communications.AllBaseTables, ...events.AllBaseTables, ...petitions.AllBaseTables];
  export type AllForeignTables = [...public.AllForeignTables, ...people.AllForeignTables, ...website.AllForeignTables, ...communications.AllForeignTables, ...events.AllForeignTables, ...petitions.AllForeignTables];
  export type AllViews = [...public.AllViews, ...people.AllViews, ...website.AllViews, ...communications.AllViews, ...events.AllViews, ...petitions.AllViews];
  export type AllMaterializedViews = [...public.AllMaterializedViews, ...people.AllMaterializedViews, ...website.AllMaterializedViews, ...communications.AllMaterializedViews, ...events.AllMaterializedViews, ...petitions.AllMaterializedViews];
  export type AllTablesAndViews = [...public.AllTablesAndViews, ...people.AllTablesAndViews, ...website.AllTablesAndViews, ...communications.AllTablesAndViews, ...events.AllTablesAndViews, ...petitions.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "admins": admins.Selectable;
    "functions": functions.Selectable;
    "instances": instances.Selectable;
    "sessions": sessions.Selectable;
    "spatial_ref_sys": spatial_ref_sys.Selectable;
    "tags": tags.Selectable;
    "task_taggings": task_taggings.Selectable;
    "tasks": tasks.Selectable;
    "people.custom_field_values": people.custom_field_values.Selectable;
    "people.custom_fields": people.custom_fields.Selectable;
    "people.group_members": people.group_members.Selectable;
    "people.groups": people.groups.Selectable;
    "people.imports": people.imports.Selectable;
    "people.interactions": people.interactions.Selectable;
    "people.list_interactions": people.list_interactions.Selectable;
    "people.list_people": people.list_people.Selectable;
    "people.list_view": people.list_view.Selectable;
    "people.lists": people.lists.Selectable;
    "people.people": people.people.Selectable;
    "people.people_search": people.people_search.Selectable;
    "people.taggings": people.taggings.Selectable;
    "website.blocks": website.blocks.Selectable;
    "website.content": website.content.Selectable;
    "website.content_types": website.content_types.Selectable;
    "website.redirects": website.redirects.Selectable;
    "website.taggings": website.taggings.Selectable;
    "website.uploads": website.uploads.Selectable;
    "communications.email_messages": communications.email_messages.Selectable;
    "communications.email_sends": communications.email_sends.Selectable;
    "communications.email_templates": communications.email_templates.Selectable;
    "communications.received_emails": communications.received_emails.Selectable;
    "communications.received_sms": communications.received_sms.Selectable;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.Selectable;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.Selectable;
    "communications.sent_emails": communications.sent_emails.Selectable;
    "communications.sent_sms": communications.sent_sms.Selectable;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.Selectable;
    "communications.sms_messages": communications.sms_messages.Selectable;
    "communications.sms_numbers": communications.sms_numbers.Selectable;
    "communications.sms_sends": communications.sms_sends.Selectable;
    "communications.sms_threads": communications.sms_threads.Selectable;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.Selectable;
    "communications.whatsapp_messages": communications.whatsapp_messages.Selectable;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.Selectable;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.Selectable;
    "communications.whatsapp_sends": communications.whatsapp_sends.Selectable;
    "communications.whatsapp_templates": communications.whatsapp_templates.Selectable;
    "communications.whatsapp_threads": communications.whatsapp_threads.Selectable;
    "events.attendees": events.attendees.Selectable;
    "events.event_attendees_view": events.event_attendees_view.Selectable;
    "events.events": events.events.Selectable;
    "events.taggings": events.taggings.Selectable;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.Selectable;
    "petitions.petitions": petitions.petitions.Selectable;
    "petitions.signatures": petitions.signatures.Selectable;
    "petitions.taggings": petitions.taggings.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "admins": admins.JSONSelectable;
    "functions": functions.JSONSelectable;
    "instances": instances.JSONSelectable;
    "sessions": sessions.JSONSelectable;
    "spatial_ref_sys": spatial_ref_sys.JSONSelectable;
    "tags": tags.JSONSelectable;
    "task_taggings": task_taggings.JSONSelectable;
    "tasks": tasks.JSONSelectable;
    "people.custom_field_values": people.custom_field_values.JSONSelectable;
    "people.custom_fields": people.custom_fields.JSONSelectable;
    "people.group_members": people.group_members.JSONSelectable;
    "people.groups": people.groups.JSONSelectable;
    "people.imports": people.imports.JSONSelectable;
    "people.interactions": people.interactions.JSONSelectable;
    "people.list_interactions": people.list_interactions.JSONSelectable;
    "people.list_people": people.list_people.JSONSelectable;
    "people.list_view": people.list_view.JSONSelectable;
    "people.lists": people.lists.JSONSelectable;
    "people.people": people.people.JSONSelectable;
    "people.people_search": people.people_search.JSONSelectable;
    "people.taggings": people.taggings.JSONSelectable;
    "website.blocks": website.blocks.JSONSelectable;
    "website.content": website.content.JSONSelectable;
    "website.content_types": website.content_types.JSONSelectable;
    "website.redirects": website.redirects.JSONSelectable;
    "website.taggings": website.taggings.JSONSelectable;
    "website.uploads": website.uploads.JSONSelectable;
    "communications.email_messages": communications.email_messages.JSONSelectable;
    "communications.email_sends": communications.email_sends.JSONSelectable;
    "communications.email_templates": communications.email_templates.JSONSelectable;
    "communications.received_emails": communications.received_emails.JSONSelectable;
    "communications.received_sms": communications.received_sms.JSONSelectable;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.JSONSelectable;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.JSONSelectable;
    "communications.sent_emails": communications.sent_emails.JSONSelectable;
    "communications.sent_sms": communications.sent_sms.JSONSelectable;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.JSONSelectable;
    "communications.sms_messages": communications.sms_messages.JSONSelectable;
    "communications.sms_numbers": communications.sms_numbers.JSONSelectable;
    "communications.sms_sends": communications.sms_sends.JSONSelectable;
    "communications.sms_threads": communications.sms_threads.JSONSelectable;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.JSONSelectable;
    "communications.whatsapp_messages": communications.whatsapp_messages.JSONSelectable;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.JSONSelectable;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.JSONSelectable;
    "communications.whatsapp_sends": communications.whatsapp_sends.JSONSelectable;
    "communications.whatsapp_templates": communications.whatsapp_templates.JSONSelectable;
    "communications.whatsapp_threads": communications.whatsapp_threads.JSONSelectable;
    "events.attendees": events.attendees.JSONSelectable;
    "events.event_attendees_view": events.event_attendees_view.JSONSelectable;
    "events.events": events.events.JSONSelectable;
    "events.taggings": events.taggings.JSONSelectable;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.JSONSelectable;
    "petitions.petitions": petitions.petitions.JSONSelectable;
    "petitions.signatures": petitions.signatures.JSONSelectable;
    "petitions.taggings": petitions.taggings.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "admins": admins.Whereable;
    "functions": functions.Whereable;
    "instances": instances.Whereable;
    "sessions": sessions.Whereable;
    "spatial_ref_sys": spatial_ref_sys.Whereable;
    "tags": tags.Whereable;
    "task_taggings": task_taggings.Whereable;
    "tasks": tasks.Whereable;
    "people.custom_field_values": people.custom_field_values.Whereable;
    "people.custom_fields": people.custom_fields.Whereable;
    "people.group_members": people.group_members.Whereable;
    "people.groups": people.groups.Whereable;
    "people.imports": people.imports.Whereable;
    "people.interactions": people.interactions.Whereable;
    "people.list_interactions": people.list_interactions.Whereable;
    "people.list_people": people.list_people.Whereable;
    "people.list_view": people.list_view.Whereable;
    "people.lists": people.lists.Whereable;
    "people.people": people.people.Whereable;
    "people.people_search": people.people_search.Whereable;
    "people.taggings": people.taggings.Whereable;
    "website.blocks": website.blocks.Whereable;
    "website.content": website.content.Whereable;
    "website.content_types": website.content_types.Whereable;
    "website.redirects": website.redirects.Whereable;
    "website.taggings": website.taggings.Whereable;
    "website.uploads": website.uploads.Whereable;
    "communications.email_messages": communications.email_messages.Whereable;
    "communications.email_sends": communications.email_sends.Whereable;
    "communications.email_templates": communications.email_templates.Whereable;
    "communications.received_emails": communications.received_emails.Whereable;
    "communications.received_sms": communications.received_sms.Whereable;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.Whereable;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.Whereable;
    "communications.sent_emails": communications.sent_emails.Whereable;
    "communications.sent_sms": communications.sent_sms.Whereable;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.Whereable;
    "communications.sms_messages": communications.sms_messages.Whereable;
    "communications.sms_numbers": communications.sms_numbers.Whereable;
    "communications.sms_sends": communications.sms_sends.Whereable;
    "communications.sms_threads": communications.sms_threads.Whereable;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.Whereable;
    "communications.whatsapp_messages": communications.whatsapp_messages.Whereable;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.Whereable;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.Whereable;
    "communications.whatsapp_sends": communications.whatsapp_sends.Whereable;
    "communications.whatsapp_templates": communications.whatsapp_templates.Whereable;
    "communications.whatsapp_threads": communications.whatsapp_threads.Whereable;
    "events.attendees": events.attendees.Whereable;
    "events.event_attendees_view": events.event_attendees_view.Whereable;
    "events.events": events.events.Whereable;
    "events.taggings": events.taggings.Whereable;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.Whereable;
    "petitions.petitions": petitions.petitions.Whereable;
    "petitions.signatures": petitions.signatures.Whereable;
    "petitions.taggings": petitions.taggings.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "admins": admins.Insertable;
    "functions": functions.Insertable;
    "instances": instances.Insertable;
    "sessions": sessions.Insertable;
    "spatial_ref_sys": spatial_ref_sys.Insertable;
    "tags": tags.Insertable;
    "task_taggings": task_taggings.Insertable;
    "tasks": tasks.Insertable;
    "people.custom_field_values": people.custom_field_values.Insertable;
    "people.custom_fields": people.custom_fields.Insertable;
    "people.group_members": people.group_members.Insertable;
    "people.groups": people.groups.Insertable;
    "people.imports": people.imports.Insertable;
    "people.interactions": people.interactions.Insertable;
    "people.list_interactions": people.list_interactions.Insertable;
    "people.list_people": people.list_people.Insertable;
    "people.list_view": people.list_view.Insertable;
    "people.lists": people.lists.Insertable;
    "people.people": people.people.Insertable;
    "people.people_search": people.people_search.Insertable;
    "people.taggings": people.taggings.Insertable;
    "website.blocks": website.blocks.Insertable;
    "website.content": website.content.Insertable;
    "website.content_types": website.content_types.Insertable;
    "website.redirects": website.redirects.Insertable;
    "website.taggings": website.taggings.Insertable;
    "website.uploads": website.uploads.Insertable;
    "communications.email_messages": communications.email_messages.Insertable;
    "communications.email_sends": communications.email_sends.Insertable;
    "communications.email_templates": communications.email_templates.Insertable;
    "communications.received_emails": communications.received_emails.Insertable;
    "communications.received_sms": communications.received_sms.Insertable;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.Insertable;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.Insertable;
    "communications.sent_emails": communications.sent_emails.Insertable;
    "communications.sent_sms": communications.sent_sms.Insertable;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.Insertable;
    "communications.sms_messages": communications.sms_messages.Insertable;
    "communications.sms_numbers": communications.sms_numbers.Insertable;
    "communications.sms_sends": communications.sms_sends.Insertable;
    "communications.sms_threads": communications.sms_threads.Insertable;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.Insertable;
    "communications.whatsapp_messages": communications.whatsapp_messages.Insertable;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.Insertable;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.Insertable;
    "communications.whatsapp_sends": communications.whatsapp_sends.Insertable;
    "communications.whatsapp_templates": communications.whatsapp_templates.Insertable;
    "communications.whatsapp_threads": communications.whatsapp_threads.Insertable;
    "events.attendees": events.attendees.Insertable;
    "events.event_attendees_view": events.event_attendees_view.Insertable;
    "events.events": events.events.Insertable;
    "events.taggings": events.taggings.Insertable;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.Insertable;
    "petitions.petitions": petitions.petitions.Insertable;
    "petitions.signatures": petitions.signatures.Insertable;
    "petitions.taggings": petitions.taggings.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "admins": admins.Updatable;
    "functions": functions.Updatable;
    "instances": instances.Updatable;
    "sessions": sessions.Updatable;
    "spatial_ref_sys": spatial_ref_sys.Updatable;
    "tags": tags.Updatable;
    "task_taggings": task_taggings.Updatable;
    "tasks": tasks.Updatable;
    "people.custom_field_values": people.custom_field_values.Updatable;
    "people.custom_fields": people.custom_fields.Updatable;
    "people.group_members": people.group_members.Updatable;
    "people.groups": people.groups.Updatable;
    "people.imports": people.imports.Updatable;
    "people.interactions": people.interactions.Updatable;
    "people.list_interactions": people.list_interactions.Updatable;
    "people.list_people": people.list_people.Updatable;
    "people.list_view": people.list_view.Updatable;
    "people.lists": people.lists.Updatable;
    "people.people": people.people.Updatable;
    "people.people_search": people.people_search.Updatable;
    "people.taggings": people.taggings.Updatable;
    "website.blocks": website.blocks.Updatable;
    "website.content": website.content.Updatable;
    "website.content_types": website.content_types.Updatable;
    "website.redirects": website.redirects.Updatable;
    "website.taggings": website.taggings.Updatable;
    "website.uploads": website.uploads.Updatable;
    "communications.email_messages": communications.email_messages.Updatable;
    "communications.email_sends": communications.email_sends.Updatable;
    "communications.email_templates": communications.email_templates.Updatable;
    "communications.received_emails": communications.received_emails.Updatable;
    "communications.received_sms": communications.received_sms.Updatable;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.Updatable;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.Updatable;
    "communications.sent_emails": communications.sent_emails.Updatable;
    "communications.sent_sms": communications.sent_sms.Updatable;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.Updatable;
    "communications.sms_messages": communications.sms_messages.Updatable;
    "communications.sms_numbers": communications.sms_numbers.Updatable;
    "communications.sms_sends": communications.sms_sends.Updatable;
    "communications.sms_threads": communications.sms_threads.Updatable;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.Updatable;
    "communications.whatsapp_messages": communications.whatsapp_messages.Updatable;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.Updatable;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.Updatable;
    "communications.whatsapp_sends": communications.whatsapp_sends.Updatable;
    "communications.whatsapp_templates": communications.whatsapp_templates.Updatable;
    "communications.whatsapp_threads": communications.whatsapp_threads.Updatable;
    "events.attendees": events.attendees.Updatable;
    "events.event_attendees_view": events.event_attendees_view.Updatable;
    "events.events": events.events.Updatable;
    "events.taggings": events.taggings.Updatable;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.Updatable;
    "petitions.petitions": petitions.petitions.Updatable;
    "petitions.signatures": petitions.signatures.Updatable;
    "petitions.taggings": petitions.taggings.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "admins": admins.UniqueIndex;
    "functions": functions.UniqueIndex;
    "instances": instances.UniqueIndex;
    "sessions": sessions.UniqueIndex;
    "spatial_ref_sys": spatial_ref_sys.UniqueIndex;
    "tags": tags.UniqueIndex;
    "task_taggings": task_taggings.UniqueIndex;
    "tasks": tasks.UniqueIndex;
    "people.custom_field_values": people.custom_field_values.UniqueIndex;
    "people.custom_fields": people.custom_fields.UniqueIndex;
    "people.group_members": people.group_members.UniqueIndex;
    "people.groups": people.groups.UniqueIndex;
    "people.imports": people.imports.UniqueIndex;
    "people.interactions": people.interactions.UniqueIndex;
    "people.list_interactions": people.list_interactions.UniqueIndex;
    "people.list_people": people.list_people.UniqueIndex;
    "people.list_view": people.list_view.UniqueIndex;
    "people.lists": people.lists.UniqueIndex;
    "people.people": people.people.UniqueIndex;
    "people.people_search": people.people_search.UniqueIndex;
    "people.taggings": people.taggings.UniqueIndex;
    "website.blocks": website.blocks.UniqueIndex;
    "website.content": website.content.UniqueIndex;
    "website.content_types": website.content_types.UniqueIndex;
    "website.redirects": website.redirects.UniqueIndex;
    "website.taggings": website.taggings.UniqueIndex;
    "website.uploads": website.uploads.UniqueIndex;
    "communications.email_messages": communications.email_messages.UniqueIndex;
    "communications.email_sends": communications.email_sends.UniqueIndex;
    "communications.email_templates": communications.email_templates.UniqueIndex;
    "communications.received_emails": communications.received_emails.UniqueIndex;
    "communications.received_sms": communications.received_sms.UniqueIndex;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.UniqueIndex;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.UniqueIndex;
    "communications.sent_emails": communications.sent_emails.UniqueIndex;
    "communications.sent_sms": communications.sent_sms.UniqueIndex;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.UniqueIndex;
    "communications.sms_messages": communications.sms_messages.UniqueIndex;
    "communications.sms_numbers": communications.sms_numbers.UniqueIndex;
    "communications.sms_sends": communications.sms_sends.UniqueIndex;
    "communications.sms_threads": communications.sms_threads.UniqueIndex;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.UniqueIndex;
    "communications.whatsapp_messages": communications.whatsapp_messages.UniqueIndex;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.UniqueIndex;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.UniqueIndex;
    "communications.whatsapp_sends": communications.whatsapp_sends.UniqueIndex;
    "communications.whatsapp_templates": communications.whatsapp_templates.UniqueIndex;
    "communications.whatsapp_threads": communications.whatsapp_threads.UniqueIndex;
    "events.attendees": events.attendees.UniqueIndex;
    "events.event_attendees_view": events.event_attendees_view.UniqueIndex;
    "events.events": events.events.UniqueIndex;
    "events.taggings": events.taggings.UniqueIndex;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.UniqueIndex;
    "petitions.petitions": petitions.petitions.UniqueIndex;
    "petitions.signatures": petitions.signatures.UniqueIndex;
    "petitions.taggings": petitions.taggings.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "admins": admins.Column;
    "functions": functions.Column;
    "instances": instances.Column;
    "sessions": sessions.Column;
    "spatial_ref_sys": spatial_ref_sys.Column;
    "tags": tags.Column;
    "task_taggings": task_taggings.Column;
    "tasks": tasks.Column;
    "people.custom_field_values": people.custom_field_values.Column;
    "people.custom_fields": people.custom_fields.Column;
    "people.group_members": people.group_members.Column;
    "people.groups": people.groups.Column;
    "people.imports": people.imports.Column;
    "people.interactions": people.interactions.Column;
    "people.list_interactions": people.list_interactions.Column;
    "people.list_people": people.list_people.Column;
    "people.list_view": people.list_view.Column;
    "people.lists": people.lists.Column;
    "people.people": people.people.Column;
    "people.people_search": people.people_search.Column;
    "people.taggings": people.taggings.Column;
    "website.blocks": website.blocks.Column;
    "website.content": website.content.Column;
    "website.content_types": website.content_types.Column;
    "website.redirects": website.redirects.Column;
    "website.taggings": website.taggings.Column;
    "website.uploads": website.uploads.Column;
    "communications.email_messages": communications.email_messages.Column;
    "communications.email_sends": communications.email_sends.Column;
    "communications.email_templates": communications.email_templates.Column;
    "communications.received_emails": communications.received_emails.Column;
    "communications.received_sms": communications.received_sms.Column;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.Column;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.Column;
    "communications.sent_emails": communications.sent_emails.Column;
    "communications.sent_sms": communications.sent_sms.Column;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.Column;
    "communications.sms_messages": communications.sms_messages.Column;
    "communications.sms_numbers": communications.sms_numbers.Column;
    "communications.sms_sends": communications.sms_sends.Column;
    "communications.sms_threads": communications.sms_threads.Column;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.Column;
    "communications.whatsapp_messages": communications.whatsapp_messages.Column;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.Column;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.Column;
    "communications.whatsapp_sends": communications.whatsapp_sends.Column;
    "communications.whatsapp_templates": communications.whatsapp_templates.Column;
    "communications.whatsapp_threads": communications.whatsapp_threads.Column;
    "events.attendees": events.attendees.Column;
    "events.event_attendees_view": events.event_attendees_view.Column;
    "events.events": events.events.Column;
    "events.taggings": events.taggings.Column;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.Column;
    "petitions.petitions": petitions.petitions.Column;
    "petitions.signatures": petitions.signatures.Column;
    "petitions.taggings": petitions.taggings.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "admins": admins.SQL;
    "functions": functions.SQL;
    "instances": instances.SQL;
    "sessions": sessions.SQL;
    "spatial_ref_sys": spatial_ref_sys.SQL;
    "tags": tags.SQL;
    "task_taggings": task_taggings.SQL;
    "tasks": tasks.SQL;
    "people.custom_field_values": people.custom_field_values.SQL;
    "people.custom_fields": people.custom_fields.SQL;
    "people.group_members": people.group_members.SQL;
    "people.groups": people.groups.SQL;
    "people.imports": people.imports.SQL;
    "people.interactions": people.interactions.SQL;
    "people.list_interactions": people.list_interactions.SQL;
    "people.list_people": people.list_people.SQL;
    "people.list_view": people.list_view.SQL;
    "people.lists": people.lists.SQL;
    "people.people": people.people.SQL;
    "people.people_search": people.people_search.SQL;
    "people.taggings": people.taggings.SQL;
    "website.blocks": website.blocks.SQL;
    "website.content": website.content.SQL;
    "website.content_types": website.content_types.SQL;
    "website.redirects": website.redirects.SQL;
    "website.taggings": website.taggings.SQL;
    "website.uploads": website.uploads.SQL;
    "communications.email_messages": communications.email_messages.SQL;
    "communications.email_sends": communications.email_sends.SQL;
    "communications.email_templates": communications.email_templates.SQL;
    "communications.received_emails": communications.received_emails.SQL;
    "communications.received_sms": communications.received_sms.SQL;
    "communications.received_whatsapp_group_messages": communications.received_whatsapp_group_messages.SQL;
    "communications.received_whatsapp_messages": communications.received_whatsapp_messages.SQL;
    "communications.sent_emails": communications.sent_emails.SQL;
    "communications.sent_sms": communications.sent_sms.SQL;
    "communications.sent_whatsapp_messages": communications.sent_whatsapp_messages.SQL;
    "communications.sms_messages": communications.sms_messages.SQL;
    "communications.sms_numbers": communications.sms_numbers.SQL;
    "communications.sms_sends": communications.sms_sends.SQL;
    "communications.sms_threads": communications.sms_threads.SQL;
    "communications.whatsapp_conversations": communications.whatsapp_conversations.SQL;
    "communications.whatsapp_messages": communications.whatsapp_messages.SQL;
    "communications.whatsapp_numbers": communications.whatsapp_numbers.SQL;
    "communications.whatsapp_quick_replies": communications.whatsapp_quick_replies.SQL;
    "communications.whatsapp_sends": communications.whatsapp_sends.SQL;
    "communications.whatsapp_templates": communications.whatsapp_templates.SQL;
    "communications.whatsapp_threads": communications.whatsapp_threads.SQL;
    "events.attendees": events.attendees.SQL;
    "events.event_attendees_view": events.event_attendees_view.SQL;
    "events.events": events.events.SQL;
    "events.taggings": events.taggings.SQL;
    "petitions.petition_signatures_view": petitions.petition_signatures_view.SQL;
    "petitions.petitions": petitions.petitions.SQL;
    "petitions.signatures": petitions.signatures.SQL;
    "petitions.taggings": petitions.taggings.SQL;
  }[T];

}
